- en: 5 Asymmetric encryption
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 非对称加密
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括
- en: Introducing the key-distribution problem
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍密钥分发问题
- en: Demonstrating asymmetric encryption with the `cryptography` package
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`cryptography`包演示非对称加密
- en: Ensuring nonrepudiation with digital signatures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过数字签名确保不可否认性
- en: In the previous chapter, you learned how to ensure confidentiality with symmetric
    encryption. Symmetric encryption, unfortunately, is no panacea. By itself, symmetric
    encryption is unsuitable for key distribution, a classic problem in cryptography.
    In this chapter, you’ll learn how to solve this problem with asymmetric encryption.
    Along the way, you’ll learn more about the Python package named `cryptography`.
    Finally, I’ll show you how to ensure nonrepudiation with digital signatures.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学会了如何使用对称加密确保机密性。不幸的是，对称加密并非万灵药。单独来说，对称加密不适用于密钥分发，这是密码学中的一个经典问题。在本章中，你将学习如何使用非对称加密解决这个问题。在此过程中，你将更多地了解名为`cryptography`的Python包。最后，我将向你展示如何通过数字签名确保不可否认性。
- en: 5.1 Key-distribution problem
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1 密钥分发问题
- en: Symmetric encryption works great when the encryptor and decryptor are the same
    party, but it doesn’t scale well. Suppose Alice wants to send Bob a confidential
    message. She encrypts the message and sends the ciphertext to Bob. Bob needs Alice’s
    key to decrypt the message. Alice now has to find a way to distribute the key
    to Bob without Eve, an eavesdropper, intercepting the key. Alice could encrypt
    her key with a second key, but how does she safely send the second key to Bob?
    Alice could encrypt her second key with a third key, but how does she . . . you
    get the point. Key distribution is a recursive problem.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当加密者和解密者是同一方时，对称加密效果很好，但它的扩展性不佳。假设Alice想要向Bob发送一条保密消息。她加密消息并将密文发送给Bob。Bob需要Alice的密钥来解密消息。现在Alice必须找到一种方法将密钥分发给Bob，而不被Eve，一个窃听者，拦截密钥。Alice可以用第二个密钥加密她的密钥，但她如何安全地将第二个密钥发送给Bob？Alice可以用第三个密钥加密她的第二个密钥，但她如何...你明白了。密钥分发是一个递归问题。
- en: The problem gets dramatically worse if Alice wants to send a message to 10 people
    like Bob. Even if Alice physically distributes the key to all parties, she would
    have to repeat the work if Eve obtains the key from just one person. The probability
    and cost of having to rotate the keys would increase tenfold. Alternatively, Alice
    could manage a different key for each person—an order of magnitude more work.
    This *key-distribution problem* is one of the inspirations for asymmetric encryption.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Alice想向像Bob这样的10个人发送消息，问题就会变得更加严重。即使Alice将密钥物理分发给所有方，如果Eve从任何一个人那里获取了密钥，她将不得不重复这项工作。更换密钥的概率和成本将增加十倍。另外，Alice可以为每个人管理不同的密钥——工作量增加一个数量级。这个*密钥分发问题*是非对称加密的灵感之一。
- en: 5.2 Asymmetric encryption
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2 非对称加密
- en: If an encryption algorithm, like AES, encrypts and decrypts with the same key,
    we call it *symmetric*. If an encryption algorithm encrypts and decrypts with
    two different keys, we call it *asymmetric*. The keys are referred to as a *key
    pair*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个加密算法，如AES，使用相同的密钥进行加密和解密，我们称之为*对称*。如果一个加密算法使用两个不同的密钥进行加密和解密，我们称之为*非对称*。密钥被称为*密钥对*。
- en: The key pair is composed of a *private key* and a *public key*. The private
    key is hidden by the owner. The public key is distributed openly to anyone; it
    is not a secret. The private key can decrypt what the public key encrypts, and
    vice versa.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥对由一个*私钥*和一个*公钥*组成。私钥由所有者隐藏。公钥公开分发给任何人；它不是一个秘密。私钥可以解密公钥加密的内容，反之亦然。
- en: '*Asymmetric encryption*, depicted in figure 5.1, is a classic solution to the
    key-distribution problem. Suppose Alice wants to safely send a confidential message
    to Bob with public-key encryption. Bob generates a key pair. The private key is
    kept secret, and the public key is openly distributed to Alice. It’s OK if Eve
    sees the public key as Bob sends it to Alice; it’s just a public key. Alice now
    encrypts her message by using Bob’s public key. She openly sends the ciphertext
    to Bob. Bob receives the ciphertext and decrypts it with his private key—the only
    key that can decrypt Alice’s message.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*非对称加密*，如图5.1所示，是解决密钥分发问题的经典解决方案。假设Alice想要安全地向Bob发送一条保密消息，使用公钥加密。Bob生成一个密钥对。私钥保密，公钥公开分发给Alice。如果Eve看到Bob向Alice发送的公钥，没关系；那只是一个公钥。现在Alice使用Bob的公钥加密她的消息。她公开将密文发送给Bob。Bob接收到密文，并使用他的私钥解密它——唯一可以解密Alice消息的密钥。'
- en: '![CH05_F01_Byrne](Images/CH05_F01_Byrne.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![CH05_F01_Byrne](Images/CH05_F01_Byrne.png)'
- en: Figure 5.1 Alice confidentially sends a message to Bob with public-key encryption.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 Alice 通过公钥加密机密地向 Bob 发送消息。
- en: This solution solves two problems. First, the key-distribution problem has been
    solved. If Eve manages to obtain Bob’s public key and Alice’s ciphertext, she
    cannot decrypt the message. Only Bob’s private key can decrypt ciphertext produced
    by Bob’s public key. Second, this solution scales. If Alice wants to send her
    message to 10 people, each person simply needs to generate their own unique key
    pair. If Eve ever manages to compromise one person’s private key, it does not
    affect the other participants.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此解决方案解决了两个问题。首先，密钥分发问题已经解决。如果 Eve 设法获取到 Bob 的公钥和 Alice 的密文，她无法解密消息。只有 Bob 的私钥才能解密由
    Bob 的公钥产生的密文。其次，此解决方案可扩展。如果 Alice 想把她的消息发送给 10 个人，每个人只需要生成自己的唯一密钥对。如果 Eve 成功地破坏了某个人的私钥，这不会影响其他参与者。
- en: This section demonstrates the basic idea of public-key encryption. The next
    section demonstrates how to do this in Python with the most widely used public-key
    cryptosystem of all time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分演示了公钥加密的基本思想。下一节演示了如何使用史上最广泛使用的公钥密码系统在 Python 中执行此操作。
- en: 5.2.1 RSA public-key encryption
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2.1 RSA 公钥加密
- en: '*RSA* is a classic example of asymmetric encryption that has stood the test
    of time. This public-key cryptosystem was developed in the late 1970s by Ron Rivest,
    Adi Shamir, and Leonard Adleman. The initialism stands for the last names of the
    creators.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*RSA* 是一种经受住时间考验的经典非对称加密的例子。这个公钥密码系统是由 Ron Rivest、Adi Shamir 和 Leonard Adleman
    在 1970 年代末期开发的。这个缩写代表了创建者的姓氏。'
- en: 'The `openssl` command that follows demonstrates how to generate a 3072-bit
    RSA private key with the `genpkey` subcommand. At the time of this writing, RSA
    keys should be at least 2048 bits:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的 `openssl` 命令演示了如何使用 `genpkey` 子命令生成一个 3072 位的 RSA 私钥。在撰写本文时，RSA 密钥应至少为 2048
    位：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ❶ Generates an RSA key
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 生成 RSA 密钥
- en: ❷ Generates private-key file to this path
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 生成私钥文件到这个路径
- en: ❸ Uses a key size of 3072 bits
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 使用 3072 位的密钥大小
- en: 'Notice the size difference between an RSA key and an AES key. An RSA key needs
    to be much larger than an AES key in order to achieve comparable strength. For
    example, the maximum size of an AES key is 256 bits: an RSA key of this size would
    be a joke. This contrast is a reflection of the underlying math models these algorithms
    use to encrypt data. RSA encryption uses integer factorization; AES encryption
    uses a substitution-permutation network. Generally speaking, keys for asymmetric
    encryption need to be larger than keys for symmetric encryption.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 RSA 密钥和 AES 密钥之间的大小差异。为了达到可比较的强度，RSA 密钥需要比 AES 密钥大得多。例如，AES 密钥的最大大小是 256
    位：这样大小的 RSA 密钥就是个笑话。这种对比反映了这些算法用于加密数据的基础数学模型。RSA 加密使用整数因子分解；AES 加密使用替换-置换网络。一般来说，用于非对称加密的密钥需要比用于对称加密的密钥更大。
- en: 'The following `openssl` command demonstrates how to extract an RSA public key
    from a private-key file with the `rsa` subcommand:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `openssl` 命令演示了如何使用 `rsa` 子命令从私钥文件中提取 RSA 公钥：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Private and public keys are sometimes stored in a filesystem. It is important
    to manage the access privileges to these files. The private-key file should not
    be readable or writable to anyone but the owner. The public-key file, on the other
    hand, can be read by anyone. The following commands demonstrate how to restrict
    access to these files on a UNIX-like system:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 私钥和公钥有时存储在文件系统中。重要的是要管理这些文件的访问权限。私钥文件不应该对除所有者以外的任何人可读或可写。另一方面，公钥文件可以被任何人读取。以下命令演示了如何在类
    Unix 系统上限制对这些文件的访问：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ❶ Owner has read and write access.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 拥有者具有读取和写入权限。
- en: ❷ Anyone can read this file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 任何人都可以读取这个文件。
- en: Note Like symmetric keys, asymmetric keys have no place in production source
    code or filesystems. Keys like this should be stored securely in key management
    services such as Amazon’s AWS Key Management Service ([https://aws.amazon.com/kms/](https://aws.amazon.com/kms/))
    and Google’s Cloud Key Management Service ([https://cloud.google.com/security-key-management](https://cloud.google.com/security-key-management)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：与对称密钥一样，非对称密钥在生产源代码或文件系统中没有用武之地。这样的密钥应该安全地存储在诸如亚马逊的 AWS 密钥管理服务（[https://aws.amazon.com/kms/](https://aws.amazon.com/kms/)）和谷歌的
    Cloud 密钥管理服务（[https://cloud.google.com/security-key-management](https://cloud.google.com/security-key-management)）之类的密钥管理服务中。
- en: 'OpenSSL serializes the keys to disk in a format known as *Privacy-Enhanced
    Mail* (*PEM*). PEM is the de facto standard way to encode key pairs. You may recognize
    the `-----BEGIN` header of each file, shown here in bold, if you’ve worked with
    PEM-formatted files already:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL将密钥串行化到磁盘上的格式称为*增强隐私邮件*（*PEM*）。PEM是编码密钥对的事实标准方式。如果您已经使用过PEM格式的文件，您可能会在每个文件中看到下面粗体显示的`-----BEGIN`头部：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Alternatively, the `cryptography` package can be used to generate keys. Listing
    5.1 demonstrates how to generate a private key with the `rsa` module. The first
    argument to `generate_private_key` is an RSA implementation detail I don’t discuss
    in this book (for more information, visit [www.imperialviolet.org/2012/03/16/rsae.html](https://cloud.google.com/security-key-management)).
    The second argument is the key size. After the private key is generated, a public
    key is extracted from it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用`cryptography`包生成密钥。列表5.1演示了如何使用`rsa`模块生成私钥。`generate_private_key`的第一个参数是本书不讨论的RSA实现细节（有关更多信息，请访问[www.imperialviolet.org/2012/03/16/rsae.html](https://cloud.google.com/security-key-management)）。第二个参数是密钥大小。生成私钥后，从中提取公钥。
- en: Listing 5.1 RSA key-pair generation in Python
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python生成RSA密钥对的列表5.1
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ❶ Complex low-level API
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 复杂的低级API
- en: ❷ Private-key generation
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 私钥生成
- en: ❸ Public-key extraction
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 公钥提取
- en: Note Production key-pair generation is rarely done in Python. Typically, this
    is done with command-line tools such as `openssl` or `ssh-keygen`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 生产密钥对的生成在Python中很少进行。通常，这是通过命令行工具如`openssl`或`ssh-keygen`完成的。
- en: The following listing demonstrates how to serialize both keys from memory to
    disk in PEM format.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表演示了如何将内存中的两个密钥序列化为磁盘上的PEM格式。
- en: Listing 5.2 RSA key-pair serialization in Python
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python序列化RSA密钥对的列表5.2
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ❶ Private-key serialization
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 私钥序列化
- en: ❷ Public-key serialization
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 公钥序列化
- en: Regardless of how a key pair is generated, it can be loaded into memory with
    the code shown in the next listing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不管密钥对如何生成，都可以使用下面列表中显示的代码将其加载到内存中。
- en: Listing 5.3 RSA key-pair deserialization in Python
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python反序列化RSA密钥对的列表5.3
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ❶ Private-key deserialization
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 私钥反序列化
- en: ❷ Public-key deserialization
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 公钥反序列化
- en: The next listing demonstrates how to encrypt with the public key and decrypt
    with the private key. Like symmetric block ciphers, RSA encrypts data with a padding
    scheme.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个列表演示了如何使用公钥加密并用私钥解密。与对称块密码一样，RSA使用填充方案加密数据。
- en: Note Optimal asymmetric encryption padding (OAEP) is the recommended padding
    scheme for RSA encryption and decryption.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 最佳非对称加密填充（OAEP）是RSA加密和解密的推荐填充方案。
- en: Listing 5.4 RSA public-key encryption and decryption in Python
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用Python进行RSA公钥加密和解密的列表5.4
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ❶ Uses OAEP padding
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 使用OAEP填充
- en: ❷ Encrypts with the public key
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 用公钥加密
- en: ❸ Decrypts with the private key
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 用私钥解密
- en: Asymmetric encryption is a two-way street. You can encrypt with the public key
    and decrypt with the private key, or, you can go in the opposite direction—encrypting
    with the private key and decrypting with the public key. This presents us with
    a trade-off between confidentiality and data authentication. Data encrypted with
    a public key is *confidential*; only the owner of the private key can decrypt
    a message, but anyone could be the author of it. Data encrypted with a private
    key is *authenticated*; receivers know the message can be authored only with the
    private key, but anyone can decrypt it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 非对称加密是双向的。你可以用公钥加密，用私钥解密；或者，你可以反向操作——用私钥加密，用公钥解密。这给我们提供了保密性和数据认证之间的权衡。用公钥加密的数据是*保密的*；只有私钥的所有者才能解密消息，但任何人都可能是其作者。用私钥加密的数据是*认证的*；接收者知道消息只能由私钥进行授权，但任何人都可以解密它。
- en: This section has demonstrated how public-key encryption ensures confidentiality.
    The next section demonstrates how private-key encryption ensures nonrepudiation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示了公钥加密如何确保保密性。下一节演示了私钥加密如何确保不可否认性。
- en: 5.3 Nonrepudiation
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3 不可否认性
- en: 'In chapter 3, you learned how Alice and Bob ensured message authentication
    with keyed hashing. Bob sent a message along with a hash value to Alice. Alice
    hashed the message as well. If Alice’s hash value matched Bob’s hash value, she
    could conclude two things: the message had integrity, and Bob is the creator of
    the message.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3章，你学会了Alice和Bob如何通过密钥散列来确保消息认证。Bob发送了一条消息以及一个哈希值给Alice。Alice也对消息进行了哈希。如果Alice的哈希值与Bob的哈希值匹配，她可以得出两个结论：消息具有完整性，并且Bob是消息的创建者。
- en: Now consider this scenario from the perspective of a third party, Charlie. Does
    Charlie know who created the message? No, because both Alice and Bob share a key.
    Charlie knows the message was created by one of them, but he doesn’t know which
    one. There is nothing to stop Alice from creating a message while claiming she
    received it from Bob. There is nothing to stop Bob from sending a message while
    claiming Alice created it herself. Alice and Bob both know who the author of the
    message is, but they cannot prove who the author is to anyone else.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从第三方 Charlie 的角度考虑这种情况。Charlie 知道谁创建了这条消息吗？不，因为 Alice 和 Bob 都共享一把密钥。Charlie
    知道消息是由他们中的一个创建的，但他不知道是哪一个。没有任何东西能阻止 Alice 在声称消息是由 Bob 发送的同时创建消息。没有任何东西能阻止 Bob
    在声称消息是由 Alice 创建的同时发送消息。Alice 和 Bob 都知道消息的作者是谁，但他们无法向任何其他人证明作者是谁。
- en: When a system prevents a participant from denying their actions, we call it
    *nonrepudiation*. In this scenario, Bob would be unable to deny his action, sending
    a message. In the real world, nonrepudiation is often used when the message represents
    an online transaction. For example, a point-of-sales system may feature nonrepudiation
    as a way to legally bind business partners to fulfill their end of agreements.
    These systems allow a third party, such as a legal authority, to verify each transaction.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个系统阻止参与者否认他们的行为时，我们称之为*不可否认性*。在这种情况下，Bob 将无法否认他的行为，即发送消息。在现实世界中，不可否认性通常在消息代表在线交易时使用。例如，销售点系统可能以不可否认性作为将商业伙伴法律约束以履行协议的一种方式。这些系统允许第三方，如法律机构，验证每笔交易。
- en: If Alice, Bob, and Charlie want nonrepudiation, Alice and Bob are going to have
    to stop sharing a key and start using digital signatures.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Alice、Bob 和 Charlie 想要不可否认性，Alice 和 Bob 将不得不停止共享密钥并开始使用数字签名。
- en: 5.3.1 Digital signatures
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.1 数字签名
- en: '*Digital* *signatures* go one step beyond data authentication and data integrity
    to ensure nonrepudiation. A digital signature allows anyone, not just the receiver,
    to answer two questions: Who sent the message? Has the message been modified in
    transit? A digital signature shares many things in common with a handwritten signature:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*数字签名*比数据验证和数据完整性更进一步，以确保不可否认性。数字签名允许任何人，而不仅仅是接收者，回答两个问题：谁发送了消息？消息在传输过程中是否被修改？数字签名与手写签名有许多相似之处：'
- en: Both signature types are unique to the signer.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种签名类型都是签名者独特的。
- en: Both signature types can be used to legally bind the signer to a contract.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种签名类型都可以用来将签署者与合同法律约束起来。
- en: Both signature types are difficult to forge.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种签名类型都难以伪造。
- en: Digital signatures are traditionally created by combining a hash function with
    public-key encryption. To digitally sign a message, the sender first hashes the
    message. The hash value and the sender’s private key then become the *input* to
    an asymmetric encryption algorithm; the *output* of this algorithm is the message
    sender’s digital signature. In other words, the plaintext is a hash value, and
    the ciphertext is a digital signature. The message and the digital signature are
    then transmitted together. Figure 5.2 depicts how Bob would implement this protocol.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 数字签名通常是通过将哈希函数与公钥加密相结合而创建的。要对消息进行数字签名，发送方首先对消息进行哈希处理。哈希值和发送者的私钥然后成为一个非对称加密算法的*输入*；此算法的*输出*是消息发送者的数字签名。换句话说，明文是哈希值，密文是数字签名。然后一起传输消息和数字签名。图
    5.2 描述了 Bob 如何实现此协议。
- en: '![CH05_F02_Byrne](Images/CH05_F02_Byrne.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![CH05_F02_Byrne](Images/CH05_F02_Byrne.png)'
- en: Figure 5.2 Bob digitally signs a message with private-key encryption before
    sending it to Alice.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 Bob 在发送给 Alice 之前使用私钥加密数字签名消息。
- en: 'The digital signature is openly transmitted with the message; it is not a secret.
    Some programmers have a hard time accepting this. This is understandable to a
    degree: the signature is ciphertext, and an attacker can easily decrypt it with
    the public key. Remember, although ciphertext is often concealed, digital signatures
    are an exception. The goal of a digital signature is to ensure nonrepudiation,
    not confidentiality. If an attacker decrypts a digital signature, they do not
    gain access to private information.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 数字签名是与消息一起公开传输的；它不是一个秘密。有些程序员很难接受这一点。在一定程度上这是可以理解的：签名是密文，攻击者可以很容易地使用公钥解密它。请记住，尽管密文通常是隐藏的，但数字签名是一个例外。数字签名的目标是确保不可否认性，而不是保密性。如果攻击者解密了数字签名，他们不会获得私人信息。
- en: 5.3.2 RSA digital signatures
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.2 RSA 数字签名
- en: Listing 5.5 demonstrates Bob’s implementation of the idea depicted in figure
    5.2\. This code shows how to sign a message with SHA-256, RSA public-key encryption,
    and a padding scheme known as probabilistic signature scheme (PSS). The `RSAPrivateKey.sign`
    method combines all three elements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.5 展示了 Bob 对图 5.2 中所示想法的实现。此代码展示了如何使用 SHA-256、RSA 公钥加密以及一种名为概率签名方案（PSS）的填充方案对消息进行签名。`RSAPrivateKey.sign`
    方法结合了这三个元素。
- en: Listing 5.5 RSA digital signatures in Python
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.5 Python 中的 RSA 数字签名
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ❶ Uses PSS padding
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 使用 PSS 填充
- en: ❷ Loads a private key using the method shown in listing 5.3
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 使用列表 5.3 中所示的方法加载私钥
- en: ❸ Signs with SHA-256
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 使用 SHA-256 进行签名
- en: ❹ Prepares message with digital signature for Alice
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 为 Alice 准备带有数字签名的消息
- en: WARNING The padding schemes for RSA digital signing and RSA public-key encryption
    are not the same. OAEP padding is recommended for RSA encryption; PSS padding
    is recommended for RSA digital signing. These two padding schemes are not interchangeable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 警告 RSA 数字签名和 RSA 公钥加密的填充方案不同。推荐使用 OAEP 填充进行 RSA 加密；推荐使用 PSS 填充进行 RSA 数字签名。这两种填充方案不能互换。
- en: After receiving Bob’s message and signature, but before she trusts the message,
    Alice verifies the signature.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收到 Bob 的消息和签名后，但在信任消息之前，Alice 验证签名。
- en: 5.3.3 RSA digital signature verification
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.3 RSA 数字签名验证
- en: 'After Alice receives Bob’s message and digital signature, she does three things:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Alice 接收到 Bob 的消息和数字签名后，她会执行三件事：
- en: She hashes the message.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 她对消息进行哈希。
- en: She decrypts the signature with Bob’s public key.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 她使用 Bob 的公钥解密签名。
- en: She compares the hash values.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 她比较哈希值。
- en: If Alice’s hash value matches the decrypted hash value, she knows the message
    can be trusted. Figure 5.3 depicts how Alice, the receiver, implements her side
    of this protocol.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Alice 的哈希值与解密的哈希值匹配，她就知道可以信任该消息。图 5.3 描绘了 Alice，接收方，如何实现协议的一部分。
- en: '![CH05_F03_Byrne](Images/CH05_F03_Byrne.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![CH05_F03_Byrne](Images/CH05_F03_Byrne.png)'
- en: Figure 5.3 Alice receives Bob’s message and verifies his signature with public-key
    decryption.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 Alice 接收 Bob 的消息并使用公钥解密验证他的签名。
- en: Listing 5.6 demonstrates Alice’s implementation of the protocol depicted in
    figure 5.3\. All three steps of digital signature verification are delegated to
    `RSAPublicKey .verify`. If the computed hash value does not match the decrypted
    hash value from Bob, the `verify` method will throw an `InvalidSignature` exception.
    If the hash values do match, Alice knows the message has not been tampered with
    and the message could have been sent only by someone with Bob’s private key—presumably,
    Bob.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.6 展示了 Alice 对图 5.3 中所示协议的实现。数字签名验证的所有三个步骤都委托给了 `RSAPublicKey.verify`。如果计算的哈希值与
    Bob 解密的哈希值不匹配，`verify` 方法将抛出 `InvalidSignature` 异常。如果哈希值匹配，Alice 就知道消息没有被篡改，消息只能由拥有
    Bob 的私钥的人发送，大概是 Bob。
- en: Listing 5.6 RSA digital signature verification in Python
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.6 Python 中的 RSA 数字签名验证
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ❶ Receives message and signature
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 接收消息和签名
- en: ❷ Uses PSS padding
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 使用 PSS 填充
- en: ❸ Loads a private key using the method shown in listing 5.3
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ❸ 使用列表 5.3 中所示的方法加载私钥
- en: ❹ Delegates signature verification to the verify method
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ❹ 将签名验证委托给 verify 方法
- en: Charlie, a third party, can verify the origin of the message in the same way
    Alice does. Bob’s signature therefore ensures nonrepudiation. He cannot deny he
    is the sender of the message, unless he also claims his private key was compromised.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Charlie，第三方，可以像 Alice 一样验证消息的来源。因此，Bob 的签名确保了不可否认性。他不能否认自己是消息的发送者，除非他还声称自己的私钥已被泄露。
- en: Eve, an intermediary, will fail if she tries to interfere with the protocol.
    She could try modifying the message, signature, or public key while in transit
    to Alice. In all three cases, the signature would fail verification. Altering
    the message would affect the hash value Alice computes. Altering the signature
    or the public key would affect the hash value Alice decrypts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Eve，一个中间人，如果她试图干预协议，将会失败。她可以尝试在传输到 Alice 的过程中修改消息、签名或公钥。在这三种情况下，签名都将无法通过验证。修改消息会影响
    Alice 计算的哈希值。修改签名或公钥会影响 Alice 解密的哈希值。
- en: This section delved into digital signatures as an application of asymmetric
    encryption. Doing this with an RSA key pair is safe, secure, and battle tested.
    Unfortunately, asymmetric encryption isn’t the optimal way to digitally sign data.
    The next section covers a better alternative.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了数字签名作为非对称加密的应用。使用 RSA 密钥对进行这样的操作是安全、可靠且经过实战检验的。不幸的是，非对称加密并不是数字签名的最佳方式。下一节将介绍一个更好的替代方案。
- en: 5.3.4 Elliptic-curve digital signatures
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.3.4 椭圆曲线数字签名
- en: As with RSA, elliptic-curve cryptosystems revolve around the notion of a key
    pair. Like RSA key pairs, elliptic-curve key pairs sign data and verify signatures;
    unlike RSA key pairs, elliptic-curve key pairs do not asymmetrically encrypt data.
    In other words, an RSA private key decrypts what its public key encrypts, and
    vice versa. An elliptic-curve key pair does not support this functionality.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 RSA 一样，椭圆曲线密码系统围绕密钥对的概念展开。与 RSA 密钥对一样，椭圆曲线密钥对用于签署数据和验证签名；与 RSA 密钥对不同的是，椭圆曲线密钥对不对数据进行非对称加密。换句话说，RSA
    私钥解密其公钥加密的内容，反之亦然。椭圆曲线密钥对不支持这种功能。
- en: Why, then, would anyone use elliptic curves over RSA? Elliptic-curve key pairs
    may not be able to asymmetrically encrypt data, but they are way faster at signing
    it. For this reason, elliptic-curve cryptosystems have become the modern approach
    to digital signatures, luring people away from RSA, with lower computational costs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么有人会选择椭圆曲线而不是 RSA？椭圆曲线密钥对可能无法对数据进行非对称加密，但在签署数据方面速度更快。因此，椭圆曲线密码系统已成为数字签名的现代方法，吸引人们摆脱
    RSA，降低计算成本。
- en: There is nothing insecure about RSA, but elliptic-curve key pairs are substantially
    more efficient at signing data and verifying signatures. For example, the strength
    of a 256-bit elliptic-curve key is comparable to a 3072-bit RSA key. The performance
    contrast between elliptic curves and RSA is a reflection of the underlying math
    models these algorithms use. Elliptic-curve cryptosystems, as the name indicates,
    use elliptic curves; RSA digital signatures use integer factorization.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: RSA 并不不安全，但椭圆曲线密钥对在签署数据和验证签名方面效率更高。例如，256 位椭圆曲线密钥的强度可与 3072 位 RSA 密钥相媲美。椭圆曲线和
    RSA 之间的性能对比反映了这些算法使用的基础数学模型。椭圆曲线密码系统使用椭圆曲线；RSA 数字签名使用整数因子分解。
- en: Listing 5.7 demonstrates how Bob would generate an elliptic-curve key pair and
    sign a message with SHA-256\. Compared to RSA, this approach results in fewer
    CPU cycles and fewer lines of code. The private key is generated with a NIST-approved
    elliptic curve known as SECP384R1, or P-384.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.7 演示了 Bob 如何生成一个椭圆曲线密钥对，并使用 SHA-256 对消息进行签名。与 RSA 相比，这种方法需要更少的 CPU 周期和更少的代码行数。私钥是使用
    NIST 批准的椭圆曲线 SECP384R1 或 P-384 生成的。
- en: Listing 5.7 Elliptic-curve digital signing in Python
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.7 在 Python 中椭圆曲线数字签名
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ❶ Signing with SHA-256
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 使用 SHA-256 进行签名
- en: Listing 5.8, picking up where listing 5.7 left off, demonstrates how Alice would
    verify Bob’s signature. As with RSA, the public key is extracted from the private
    key; the `verify` method throws an `InvalidSignature` if the signature fails verification.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.8 继续上一列表 5.7，演示了 Alice 如何验证 Bob 的签名。与 RSA 一样，公钥从私钥中提取；如果签名未通过验证，`verify`
    方法会抛出 `InvalidSignature`。
- en: Listing 5.8 Elliptic-curve digital signature verification in Python
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.8 在 Python 中椭圆曲线数字签名验证
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ❶ Extracts public key
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 提取公钥
- en: ❷ Handles verification failure
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 处理验证失败
- en: Sometimes rehashing a message is undesirable. This is often the case when working
    with large messages or a large number of messages. The `sign` method, for RSA
    keys and elliptic-curve keys, accommodates these scenarios by letting the caller
    take responsibility for producing the hash value. This gives the caller the option
    of efficiently hashing the message or reusing a previously computed hash value.
    The next listing demonstrates how to sign a large message with the `Prehashed`
    utility class.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有时重新对消息进行哈希是不可取的。当处理大型消息或大量消息时，通常会出现这种情况。`sign` 方法，针对 RSA 密钥和椭圆曲线密钥，通过让调用者负责生成哈希值来适应这些情况。这使调用者可以选择高效地对消息进行哈希或重用先前计算的哈希值。下一个列表演示了如何使用
    `Prehashed` 实用类对大型消息进行签名。
- en: Listing 5.9 Signing a large message efficiently in Python
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5.9 在 Python 中高效签署大型消息
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ❶ Caller hashes message efficiently
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ 调用者高效地对消息进行哈希
- en: ❷ Signs with the Prehashed utility class
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ 使用 Prehashed 实用类进行签名
- en: 'By now, you have a working knowledge of hashing, encryption, and digital signatures.
    You’ve learned the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经掌握了散列、加密和数字签名的工作知识。您学到了以下内容：
- en: Hashing ensures data integrity and data authentication.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散列确保数据的完整性和数据的认证。
- en: Encryption ensures confidentiality.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密确保机密性。
- en: Digital signatures ensure nonrepudiation.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名确保不可否认。
- en: This chapter presented many low-level examples from the `cryptography` package
    for instructional purposes. These low-level examples prepare you for the high-level
    solution I cover in the next chapter, Transport Layer Security. This networking
    protocol brings together everything you have learned so far about hashing, encryption,
    and digital signatures.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了`cryptography`包中的许多低级示例，供教学目的使用。这些低级示例为您准备了下一章我将介绍的高级解决方案，即传输层安全性所需的一切。这种网络协议将您迄今所学的关于散列、加密和数字签名的一切内容汇集在一起。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Asymmetric encryption algorithms use different keys for encryption and decryption.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非对称加密算法使用不同的密钥进行加密和解密。
- en: Public-key encryption is a solution to the key-distribution problem.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公钥加密是解决密钥分发问题的方案。
- en: RSA key pairs are a classic and secure way to asymmetrically encrypt data.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSA密钥对是一种经典且安全的非对称加密数据的方式。
- en: Digital signatures guarantee nonrepudiation.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名保证不可否认。
- en: Elliptic-curve digital signatures are more efficient than RSA digital signatures.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 椭圆曲线数字签名比RSA数字签名更有效。
