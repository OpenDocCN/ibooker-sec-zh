- en: 2 What is cryptography?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是密码学？
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖
- en: Basic terms used in cryptography
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码学中使用的基本术语
- en: What is an unbreakable cipher?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是不可破解的密码？
- en: What are the different types of cryptography?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些不同类型的密码学？
- en: Cryptography is often called “The Art of Secret Writing.” It is more than that.
    It encompasses everything from invisible inks to transmitting messages by quantum
    entanglement of photons. In particular, cryptography includes the making and breaking
    of codes and ciphers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学通常被称为“秘密写作的艺术”。它不仅仅是那样。它涵盖了从隐形墨水到通过光子的量子纠缠传输消息的所有内容。特别是，密码学包括制作和破译代码和密码。
- en: Different authors use cryptographic terminology in inconsistent ways, so let
    us begin by agreeing on some basic terms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的作者以不一致的方式使用密码学术语，因此让我们首先就一些基本术语达成一致。
- en: '*Plaintext* or *cleartext* is the message or document that you wish to keep
    secret. In traditional cryptography, the message was text written in some language
    known to both sender and receiver. In a computer setting, this could be any type
    of file such as a PDF (text), JPG (image), MP3 (audio), or AVI (multimedia).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*明文* 或 *纯文本* 是你希望保密的消息或文档。在传统密码学中，消息是发送者和接收者都知道的某种语言编写的文本。在计算机环境中，这可以是任何类型的文件，例如
    PDF（文本）、JPG（图像）、MP3（音频）或 AVI（多媒体）。'
- en: 'A *cipher* is a method, or *algorithm*, for garbling a message to make it unreadable:
    for example, by changing the order of the characters or by replacing some characters
    with different characters. In general, ciphers operate on individual characters
    or groups of characters in the text without regard for their meaning.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码* 是一种用于使消息变得不可读的方法，或 *算法*：例如，通过改变字符的顺序或用不同的字符替换一些字符。通常，密码对文本中的单个字符或字符组进行操作，而不考虑它们的含义。'
- en: A *key* is a secret piece of information known only to the sender and the legitimate
    receiver(s) that selects which transformation is used for each message. For example,
    if the cipher (method) is to change the order of the letters in a message, the
    key might specify which order to use for that day’s messages. A key can be a letter,
    a word or phrase, a number, or a sequence of letters, words and numbers. The strength
    of a cipher is highly dependent on the total size of the keys it uses.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*密钥* 是仅知道发送者和合法接收者的秘密信息，用于选择每条消息使用的转换的信息。例如，如果密码（方法）是改变消息中字母的顺序，密钥可能指定当天消息使用的顺序。密钥可以是字母、单词或短语、数字或字母、单词和数字的序列。密码的强度高度依赖于它使用的密钥的总大小。'
- en: A *keyword* or *keyphrase* is a word or phrase used as a key.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*关键字* 或 *关键短语* 是用作密钥的单词或短语。'
- en: '*Encryption* or *encipherment* is the process of changing the plaintext into
    an unreadable garble by the legitimate sender who knows the key.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*加密* 或 *加密* 是将明文变成不可读杂乱的过程，合法发送者知道密钥。'
- en: '*Ciphertext* is the resulting garbled unreadable message or document, which
    will be transmitted or stored.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*密文* 是结果杂乱不可读的消息或文档，将被传输或存储。'
- en: '*Decryption* or *decipherment* is the process that the legitimate receiver,
    who knows the method and the key, uses to turn the garbled ciphertext back into
    the original plaintext message.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*解密* 或 *解密* 是合法接收者使用的过程，合法接收者知道方法和密钥，将杂乱的密文转换回原始明文消息。'
- en: A *code* is also a method for garbling a message to make it unreadable. By contrast
    to a cipher, a code normally operates on words or phrases in a message. A typical
    code replaces words or phrases with groups of digits or letters. (Confusingly,
    the word *code* is also used to mean a standardized representation for letters,
    such as Morse code. Hopefully the meaning will be clear from the context.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码* 也是一种使消息变得不可读的方法。与密码相比，代码通常是对消息中的单词或短语进行操作。典型的代码用数字或字母组成的组替换单词或短语。（令人困惑的是，“代码”这个词也用来表示字母的标准化表示，例如莫尔斯电码。希望从上下文中可以清楚地理解其含义。）'
- en: '*Cryptology* is the formal study of cryptography, the mathematics and methodologies
    used for constructing and solving ciphers. Scholars study cryptology; code-breakers
    study cryptanalysis.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码学* 是对密码学的形式化研究，用于构建和解决密码的数学和方法论。学者们研究密码学；破译者研究密码分析。'
- en: '*Cryptanalysis* is the study of codes and ciphers for the specific purpose
    of identifying weaknesses and finding ways to break them or, conversely, ways
    to strengthen them.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*密码分析* 是研究代码和密码的专门目的，以识别弱点并找到突破它们或相反，加强它们的方法。'
- en: '*Code-breaking* is the process of solving encrypted messages by third parties
    (enemies or opponents) who do not have the key and may not even know the method.
    This can be done by mathematical methods or by the patient amassing and collating
    of intercepts, but in practice often comes down to the three B’s: bribery, blackmail
    and break-ins.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*破译*是指通过没有密钥并且可能不知道加密方法的第三方（敌人或对手）解决加密消息的过程。这可以通过数学方法或通过耐心地收集和整理拦截来完成，但实际上通常归结为三个B：贿赂、勒索和入侵。'
- en: 2.1 Unbreakable ciphers
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 无法破解的密码
- en: Now that we have some common language, let me address the main issue. What exactly
    do I mean by “unbreakable”? First, I mean that a cipher cannot be broken by cryptographic
    means. This excludes break-ins, bribery, coercion, defections, extortion, honeytraps
    and similar means. Those lie outside our scope. Second, I mean that the cipher
    cannot be broken in a practical sense. Any opponent has finite resources and finite
    time to devote to the code-breaking task. When choosing a cipher, you need to
    have some idea of how much manpower and computer power your potential opponent(s)
    may expend on breaking your cipher. Make a conservative guess, allow for improvements
    in computers, add a margin of safety, and pick a number. Then, when you choose
    a cipher, you have a target to aim for. Reach that target and your cipher is effectively
    unbreakable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些共同的语言，让我来解决主要问题。我所说的“无法破解”到底是什么意思？首先，我指的是一个密码不能通过密码学手段破解。这排除了入侵、贿赂、胁迫、叛变、敲诈勒索、诱捕等手段。这些超出了我们的范围。其次，我指的是密码在实践中无法被破解。任何对手都有有限的资源和有限的时间来投入到破译任务中。在选择密码时，你需要对你的潜在对手可能用来破解你的密码的人力资源和计算机资源有一定的了解。做一个保守的猜测，考虑计算机的改进，增加安全边际，然后选择一个数字。然后，当你选择一个密码时，你就有了一个目标。达到这个目标，你的密码就是有效无法破解的。
- en: Remember that many messages have a limited lifespan. If your message is ATTACK
    AT DAWN, and your enemy reads your message at noon, it’s too late. You have already
    attacked. A cipher that can be broken in 12 hours is effectively unbreakable when
    your opponent does not have 12 hours.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，许多消息的寿命有限。如果你的消息是攻击在黎明时分，而你的敌人在中午读到了你的消息，那就太晚了。你已经发动了攻击。一个在12小时内可以被破解的密码，在你的对手没有12小时的情况下是无法被破解的。
- en: Just to make this concept doubly clear, when I say that a cipher has been *broken*,
    I mean that an opponent can read messages sent using that cipher. Even if the
    opponent can read only 1% or .01% of the messages, the cipher is broken. But there
    is a cutoff somewhere. If the opponent can read a message only if they have intercepted
    many messages of the same length enciphered with the same key, or where 63 out
    of 64 key bits are zero, then the cipher is still unbroken. The opponent has no
    *a priori* way of telling which messages used which key, or which keys are nearly
    all-zero. It may never happen that you send two messages with the same length
    and same key, or where 63 key bits out of 64 are zero.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了让这个概念更加清晰，当我说一个密码已经被*破解*时，我是指对手可以读取使用该密码发送的消息。即使对手只能读取1%或0.01%的消息，该密码也被破解了。但是有一个截止点。如果对手只有在拦截了许多使用相同密钥加密的相同长度的消息，或者其中63个密钥位为零时才能读取消息，则密码仍然未破解。对手没有*先验*的方法来确定哪些消息使用了哪些密钥，或者哪些密钥几乎全为零。你可能永远不会发送两条相同长度且使用相同密钥的消息，或者其中63个密钥位中有64个为零的消息。
- en: If your cipher uses a 256-bit key, and an enemy cryptanalyst finds a mathematical
    or computational method to reduce this to 200 bits or even 150 bits, that cipher
    may be weakened, but it is still unbroken if your chosen level of security is
    128 bits. Using a 256-bit key to achieve a security level of 128 bits provides
    a huge margin of safety.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的密码使用了一个256位的密钥，而一个敌方密码分析家找到了一个将其减少到200位甚至150位的数学或计算方法，那么该密码可能会被削弱，但如果你选择的安全级别是128位，它仍然未被破解。使用256位密钥来实现128位安全级别提供了巨大的安全保障。
- en: When the government decided that the old Data Encryption Standard was no longer
    safe, it held an international competition for a new cipher. Proposals were solicited
    worldwide. Dozens of ciphers were submitted. Hundreds of cryptographers evaluated
    these candidate ciphers for security, speed and ease of implementation. There
    were three rounds of winnowing lasting from 1997 to April 2000 until a winner
    was chosen. That’s what you need to do when your cipher is going to be a worldwide
    standard for governments, banking, industry and the military. If you decide to
    enter the next competition, this book will help prepare you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当政府决定旧的数据加密标准不再安全时，它举行了一场新密码的国际竞赛。在全球范围内征集提案。数十种密码被提交。数百名密码学家评估了这些候选密码的安全性、速度和易于实施性。从1997年到2000年4月，进行了三轮淘汰，直到选出了一个获胜者。当你的密码将成为政府、银行、工业和军事的全球标准时，你需要做的就是这样。如果你决定参加下一次的竞赛，这本书将帮助你做好准备。
- en: Most readers, however, will not attempt that. Their ciphers will have more limited
    scope. They may trust their own judgment, or whatever verification process they
    devise, for evaluating their ciphers. The principles in chapter 12 will help guide
    them to a sound and confident decision.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数读者不会尝试那样做。他们的密码会有更有限的范围。他们可能会信任自己的判断，或者他们设计的任何验证过程，来评估他们的密码。第 12 章的原则将帮助他们做出明智和自信的决定。
- en: 2.2 Types of cryptography
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 密码学的类型
- en: There are many different types of cryptography. Some types used in the past
    were
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学有许多不同的类型。过去使用的一些类型是
- en: '*Hidden message*: for example, the messenger could swallow the message, or
    hide it in their boot heel or saddle, or simply memorize it. It was common in
    ancient times to have a messenger memorize a message phonetically in a language
    they did not understand.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*隐藏消息*：例如，信使可以吞下消息，或将其藏在靴子跟或马鞍中，或者简单地记住它。在古代，让信使把消息以他们不理解的语言的发音记忆是很常见的。'
- en: '*Secret method*, such as the *Caesar Cipher*, where each letter of the alphabet
    is replaced by the letter 3 places later. That is, A becomes D, B becomes E, C
    becomes F, and so forth.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*秘密方法*，比如*凯撒密码*，其中字母表中的每个字母都被替换为后面3个位置的字母。也就是说，A 变成了 D，B 变成了 E，C 变成了 F，依此类推。'
- en: '*Disguised message*, where the message is made to look like something else,
    such as a design in the messenger’s garments.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*伪装消息*，其中消息被制成看起来像其他东西，比如信使的衣服设计。'
- en: '*Invisible* *message*, such as microdots, or invisible inks that become visible
    when heated or exposed to acid.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*隐形信息*，如微点或在加热或暴露于酸性物质时变得可见的隐形墨水。'
- en: '*Misdirection*: for example, where the signature or the shape and color of
    the paper are the true messages, and everything else is distraction or disinformation.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*误导*：例如，签名或纸张的形状和颜色是真正的消息，而其他一切都是干扰或虚假信息。'
- en: Collectively, all methods for hiding a message are called *steganography*, first
    described in the 1499 book *Steganographia* by Benedictine abbot Johannes Trithemius,
    born Johannes Heidenberg. Trithemius’s book is itself a form of steganography,
    since it is disguised as a book of magic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有隐藏消息的方法统称为*隐写术*，最早在1499年本笃会修士约翰内斯·特里特米乌斯（Johannes Trithemius）的著作《隐写术》（Steganographia）中描述，特里特米乌斯出生于约翰内斯·海登贝格。特里特米乌斯的书本身就是一种隐写术，因为它伪装成一本魔法书。
- en: Some of these steganographic methods have modern counterparts. For example,
    a message can be concealed in a JPEG image file by using only the low-order bits
    of each pixel. Another example is to use a random number generator to pick certain
    bits in each byte of a file. The chosen bits contain the message, and the remaining
    bits can be random gibberish.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些隐写术方法有现代对应物。例如，可以通过仅使用每个像素的低阶位在 JPEG 图像文件中隐藏消息。另一个例子是使用随机数生成器来选择文件的每个字节中的特定位。所选位包含消息，其余位可以是随机的无用信息。
- en: Before describing modern ciphers, let me introduce a useful shorthand. A message
    is sent from a sender to a receiver, and the purpose of encryption is to keep
    some enemy from reading the message. For brevity, I call the sender Sandra, the
    intended receiver Riva, and the enemy Emily. That is more natural than Alice,
    Bob and Carol, isn’t it?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述现代密码之前，让我介绍一个有用的简化方法。一条消息从发送者发送给接收者，加密的目的是阻止某个敌人阅读消息。为了简洁起见，我将发送者称为桑德拉，预期接收者称为莉娃，敌人称为艾米丽。这比艾丽斯、鲍勃和卡罗尔更自然，不是吗？
- en: '![2-unnumb-1](../Images/2-unnumb-1.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![2-unnumb-1](../Images/2-unnumb-1.png)'
- en: 'Usually Sandra enciphers the message at her location before sending it to Riva.
    The message may be sent by any means: letter, telephone, internet, shortwave radio,
    Aldis lamp, microburst, telegraph, fiber-optic cable, semaphore, quantum entanglement,
    or even smoke signals if there is a direct line of sight. To make this picture
    more complete, the cipher may require a key as well as the plaintext, and there
    may be an enemy listening in. Here is a fuller image.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常桑德拉在本地对消息进行加密，然后再发送给莉娃。消息可以通过任何方式发送：信件、电话、互联网、短波无线电、阿尔迪斯灯、微气泡、电报、光纤电缆、信号旗、量子纠缠，甚至如果有直线视野的话，还可以使用烟信号。为了使这个图像更加完整，密码可能需要一个密钥以及明文，可能会有敌人在监听。这是一个更完整的图像。
- en: '![2-unnumb-2](../Images/2-unnumb-2.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![2-unnumb-2](../Images/2-unnumb-2.png)'
- en: 'Modern ciphers generally fall into three broad categories: Secret Key, Public
    Key and Personal Key. Their main distinguishing features are as follows.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现代密码通常分为三大类：**秘钥**、**公钥**和**个人钥匙**。它们的主要区别如下。
- en: '*Secret Key*: Sandra has a secret key, which she uses to encipher messages.
    Riva has a corresponding secret key, which she uses to decipher those messages.
    This may be the same key or an *inverse* key. Usually Sandra controls the key.
    When Sandra changes the key, she must send the new key, or its inverse, to Riva.
    This is the standard paradigm of classical cryptography.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*秘钥*：桑德拉有一个秘密密钥，用于加密消息。莉娃有一个对应的秘密密钥，用于解密这些消息。这可能是相同的密钥或者一个*反向*密钥。通常情况下，桑德拉控制着密钥。当桑德拉更改密钥时，她必须将新密钥或其反向密钥发送给莉娃。这是经典密码学的标准范例。'
- en: '*Public Key*: Riva has a public encryption key, which she makes known to everyone.
    Whenever Sandra wants to send Riva a message, she enciphers it using Riva’s public
    key. Riva also has a secret decryption key, known only to herself, which she can
    use to decipher the messages that she receives. To make this scheme work, it is
    essential that nobody else can compute this secret key from the public information.
    The dominant Public Key method is the RSA algorithm invented by Ronald Rivest,
    Adi Shamir and Len Adelman in about 1975.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*公钥*：莉娃有一个公共加密密钥，她向所有人公开。每当桑德拉想要给莉娃发送消息时，她都会使用莉娃的公钥对其进行加密。莉娃还有一个秘密解密密钥，只有她自己知道，她可以用来解密她收到的消息。要使这个方案工作，重要的是没有其他人可以从公共信息计算出这个秘密密钥。主要的公钥方法是由罗纳德·里韦斯特、阿迪·沙米尔和伦·阿德曼于大约1975年发明的RSA算法。'
- en: '*Personal Key*: Sandra and Riva each have a personal key they share with nobody,
    not even one another. Since no keys are ever transmitted or shared, Personal Key
    cryptography is sometimes called *keyless* cryptography. Here is how it works:
    (Pass 1) Sandra enciphers the message with her personal key and sends the enciphered
    message to Riva. (Pass 2) Riva enciphers that message with her personal key and
    sends this doubly enciphered message back to Sandra. (Pass 3) Sandra deciphers
    that message using her personal key and sends this back to Riva. The message is
    now enciphered only with Riva’s key, which she uses to read the message.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*个人钥匙*：桑德拉和莉娃各自拥有一个个人钥匙，不与任何人分享，甚至不与彼此分享。由于从未传输或分享任何密钥，个人密钥密码学有时被称为*无密钥*密码学。它是如何工作的：（第一步）桑德拉用她的个人密钥对消息进行加密，并将加密的消息发送给莉娃。
    （第二步）莉娃用她的个人密钥对该消息进行再次加密，并将这个双重加密的消息发送回给桑德拉。 （第三步）桑德拉使用她的个人密钥对该消息进行解密，并将其发送回给莉娃。
    现在消息只使用莉娃的密钥加密，她可以使用该密钥来阅读消息。'
- en: The tricky part here is that Sandra’s encryption and Riva’s encryption need
    to *commute*. That is, they must produce the same result regardless of whether
    Sandra encrypts first or Riva encrypts first. Symbolically, we express this as
    SRM=RSM, where M is the message and S and R are Sandra’s and Riva’s encryptions.
    The advantage of Personal Key cryptography is that anybody can communicate securely
    with anybody else without having to prearrange any keys or transmit any keys,
    so there is no possibility of a key being intercepted.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的棘手之处在于桑德拉的加密和莉娃的加密需要*交换律*。也就是说，无论桑德拉先加密还是莉娃先加密，它们都必须产生相同的结果。符号上，我们将其表示为SRM=RSM，其中M是消息，S和R分别是桑德拉和莉娃的加密。个人密钥加密的优势在于，任何人都可以与任何其他人安全地通信，而无需预先安排任何密钥或传输任何密钥，因此不存在密钥被拦截的可能性。
- en: Personal Key cryptography is also called the *Three Pass Protocol*. A *protocol*
    is just a sequence of steps used for some purpose such as transmitting a message.
    In other words, a protocol is an algorithm. The basic idea for the Three Pass
    Protocol was invented by Adi Shamir in about 1975, and the specific method I present
    in this book is my own.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 个人密钥密码学也称为*三次传递协议*。*协议*只是用于某种目的（如传输消息）的一系列步骤。换句话说，协议就是一种算法。三次传递协议的基本思想是由 Adi
    Shamir 在大约 1975 年发明的，我在本书中介绍的具体方法则是我自己的。
- en: 2.3 Symmetric vs. asymmetric cryptography
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 对称与非对称密码学
- en: 'Many books state that cryptography can be divided into two types: *symmetric*
    and *asymmetric* ciphers. The idea is that in Secret Key cryptography, Sandra
    and Riva use the same key to both encrypt and decrypt the message, while in Public
    Key cryptography, Sandra uses one key while Riva uses its inverse. This dichotomy
    overlooks Personal Key cryptography, which is neither symmetric nor asymmetric,
    as well as the various classical methods described at the start of section 2.2\.
    Moreover, the symmetric/asymmetric classification is not always accurate. In section
    15.1 I describe the *Hill Cipher*, a Secret Key method where encryption consists
    of multiplying the message by the key, and decryption consists of multiplying
    by an inverse key—just like Public Key cryptography.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多书籍指出，密码学可以分为两种类型：*对称*和*非对称*密码。其观点是，在秘密密钥密码学中，Sandra 和 Riva 使用相同的密钥来加密和解密消息，而在公钥密码学中，Sandra
    使用一个密钥，而 Riva 使用其逆密钥。这种二分法忽视了个人密钥密码学，既不对称也不对称，以及第 2.2 节开头描述的各种经典方法。此外，对称/非对称分类并不总是准确的。在第
    15.1 节中，我描述了 *希尔密码*，一种加密方法，其中加密是通过密钥乘以消息来完成的，而解密是通过乘以逆密钥来完成的——就像公钥密码学一样。
- en: Categorizing a cipher as either symmetric or asymmetric is not particularly
    useful. It fails to capture the essential difference between Secret Key and Public
    Key cryptography, namely that in Secret Key cryptography, all of the keys are
    kept secret, while in Public Key cryptography, each party keeps one key secret
    and makes one key public and available to everyone.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将密码作为对称或非对称的分类并不特别有用。它未能捕捉到秘密密钥和公钥密码学之间的本质区别，即在秘密密钥密码学中，所有密钥都保持秘密，而在公钥密码学中，每个参与方都保持一个密钥秘密，并将一个密钥公开并提供给所有人。
- en: Public Key cryptography and Personal Key cryptography both came out around 1975\.
    Public Key cryptography fired the imagination, so Secret Key and Personal Key
    methods have received scant attention since that time. Public Key cryptography
    is fully covered in many books. This book focuses primarily on Secret Key cryptography,
    the mainstay and bedrock of cryptography.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥密码学和个人密钥密码学都诞生于 1975 年左右。公钥密码学引发了人们的想象力，因此自那时以来，秘密密钥和个人密钥方法受到了少数关注。许多书籍对公钥密码学有详尽的介绍。本书主要关注秘密密钥密码学，这是密码学的主要支柱和基石。
- en: 2.4 Block ciphers vs. stream ciphers
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 块密码与流密码
- en: Another classification is to divide ciphers into block ciphers and stream ciphers.
    Block ciphers operate on blocks of characters in the message, say blocks of 5
    characters. Usually all of the blocks are the same size, and the same key is used
    for every block.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种分类是将密码分为块密码和流密码。块密码对消息中的字符块进行操作，比如 5 个字符的块。通常所有的块大小都相同，并且每个块都使用相同的密钥。
- en: Stream ciphers operate on one character of the message at a time. Each character
    has its own key, called the *character key*, typically taken from a larger key
    called the *message key*. In older stream ciphers the message key was repeated.
    For example, if the message key size was 10 characters, then the first key character
    would be used to encipher message characters 1, 11, 21, 31, ... of the message,
    the second key character would encipher message characters 2, 12, 22, 32, ...
    , and so forth. Ciphers using regularly repeating keys are called *periodic*.
    In newer stream ciphers the message key is usually as long as the message itself
    and is called the *key stream*. This *aperiodic*, or non-periodic, style of enciphering
    is called the *one-time pad*. In chapter 13, there are discussions of how key
    streams can be generated.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 流密码是一次处理消息的一个字符。每个字符都有自己的密钥，称为*字符密钥*，通常取自称为*消息密钥*的较大密钥。在旧的流密码中，消息密钥被重复使用。例如，如果消息密钥大小为10个字符，那么第一个密钥字符将用于加密消息的第1、11、21、31等字符，第二个密钥字符将用于加密消息的第2、12、22、32等字符，依此类推。使用定期重复密钥的密码称为*周期性*密码。在较新的流密码中，消息密钥通常与消息本身一样长，并称为*密钥流*。这种*非周期性*或非周期性的加密方式称为*一次性密码本*。在第13章中，将讨论如何生成密钥流。
- en: The block/stream classification is not exclusive. There are hybrid ciphers where
    the message is broken up into blocks, but different blocks are enciphered with
    different keys, so the cipher operates on a stream of blocks rather than a stream
    of characters.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 区块/流分类并不是互斥的。还有混合密码，其中消息被分成块，但不同的块用不同的密钥加密，因此密码是对一系列块而不是一系列字符进行操作。
- en: 2.5 Mechanical vs. digital
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 机械与数字
- en: Ciphers can also be classified according to the means used to produce them.
    The earliest ciphers were done entirely by hand. Not using pencil and paper, but
    rather stylus and parchment, or stylus and clay tablet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 密码也可以根据产生它们的方法进行分类。最早的密码完全是手工完成的。不是用铅笔和纸，而是用尖笔和羊皮纸，或尖笔和粘土板。
- en: The first mechanical means of encipherment was the *skytale* or *scytale* (pronounced
    SKIT-a-lee) used by the ancient Greeks and Spartans, probably as early as 700
    BCE. This consisted of a rod with a narrow strip of leather or parchment wound
    around it so the edges of each turn carefully matched the edges of the adjacent
    turns. In other words, there were no gaps and no overlaps. The letters of the
    message were written across two or more turns of the strip. When the strip was
    unwound, only disconnected pieces of the letters were visible so that an enemy
    would not recognize that it contained a message. Additional squiggles or patches
    of color could be added to make it look like a decoration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种机械加密手段是由古希腊人和斯巴达人使用的*天线*或*斯底尔*（发音为SKIT-a-lee），可能早在公元前700年就已经存在了。它由一个棒状物组成，周围缠绕着一条窄窄的皮革或羊皮纸条，以便每个转的边缘与相邻转的边缘完全匹配。换句话说，没有间隙，也没有重叠。消息的字母被写在带子的两个或更多转上。当带子解开时，只有断断续续的字母片段可见，以便敌人不会意识到其中包含一条消息。还可以添加额外的波纹或颜色斑块，使其看起来像是装饰品。
- en: The sender kept the staff for reading and writing future messages. Messengers
    could wear the strip as a belt or use it to tie up their hair or cinch their saddles.
    The recipient needed a rod of identical diameter to reconstitute the message.
    Messengers, of course, were not told the purpose of the ribbon or thong. It might
    even be sewn into their garments without their knowledge.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 发件人保留棒以供阅读和编写未来的消息。信使可以将带子当作腰带佩戴，或用来扎头发或勒马鞍。收件人需要一个与之直径相同的棒来重建消息。当然，信使们不会被告知带子或鞍带的目的。它甚至可能被偷偷地缝进他们的衣服中而不被察觉。
- en: There is an image of a skytale in the 1593 edition of *De Occultis Literarum
    Notis* by Giovanni Battista Porta. It shows how each Greek letter spans several
    turns of the leather strip. Here is a modern version.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在乔瓦尼·巴蒂斯塔·波尔塔（Giovanni Battista Porta）的1593年版《关于隐秘文字记号》中有一张关于天线的图片。它展示了每个希腊字母是如何跨越几个转的皮带的。这是一个现代版本。
- en: '![2-unnumb-3](../Images/2-unnumb-3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![2-unnumb-3](../Images/2-unnumb-3.png)'
- en: 'The Greeks kept the secret of the skytale for about 700 years. The Romans,
    however, were not so successful. Eventually their enemies in northern Europe learned
    the meaning and use of these rods. So, the Romans invented a special measuring
    tool consisting of a hollow brass or bronze dodecahedron, a solid shape with 12
    identical pentagonal faces, with a circular hole on each face. These holes allowed
    them to make wooden rods of precisely the correct diameter. When a governor (satrap),
    ambassador, or spy was sent to a post that required travel through hostile territory,
    it was safer to carry this tool than to carry an actual skytale that could be
    captured. The 12 holes had different diameters to allow for secure communications
    with other governors, ambassadors and spies: for example, small for Londinium
    (now London), medium for Lugdunum (now Lyon), and large for Tarraco (now Tarragona
    in Catalonia).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 希腊人保守了 skytale 的秘密约 700 年。然而，罗马人并不那么成功。最终，他们在北欧的敌人了解了这些棒子的意义和用途。因此，罗马人发明了一种特殊的测量工具，由一个空心的黄铜或青铜十二面体组成，这是一个具有
    12 个相同五边形面的固体形状，每个面上有一个圆孔。这些孔允许他们制作精确直径的木棍。当派驻需要穿越敌对领土的总督（satrap）、大使或间谍时，携带这种工具比携带可能被捕获的实际
    skytale 更安全。这 12 个孔具有不同的直径，以便与其他总督、大使和间谍进行安全通信：例如，伦敦（现为伦敦）的小孔，里昂（现为里昂）的中等孔，以及塔拉戈纳（现为加泰罗尼亚的塔拉戈纳）的大孔。
- en: So far as is known, the purpose of these dodecahedrons was never discovered
    by the northern Europeans or, for that matter, by modern archeologists. Archeologists
    have proposed a plethora of preposterous purposes for these artifacts, such as
    children’s toys, saddle ornaments, practice pieces for blacksmiths, candleholders,
    range-finders for artillery, or, the answer of last resort, religious objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 据所知，这些十二面体的用途从未被北欧人或现代考古学家发现。考古学家为这些物品提出了许多荒谬的目的，如儿童玩具、鞍饰、铁匠的练习作品、烛台、火炮测距器，或者最后的答案，宗教物品。
- en: This is a bronze Roman dodecahedron found near Tongeren, the oldest town in
    Belgium, and displayed in the Gallo-Romeins Museum.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在比利时最古老的城镇汤根附近发现的一枚青铜罗马十二面体，并展示在加洛-罗马博物馆。
- en: '![2-unnumb-4](../Images/2-unnumb-4.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![2-unnumb-4](../Images/2-unnumb-4.png)'
- en: 'Here is an interesting side note: If you look up *skytale* in Wikipedia and
    other websites, it says that the skytale was used to produce a transposition cipher
    by writing each letter within one turn of the strip. This is wrong. Such a strip
    would easily be recognized as a cipher message. Whether or not the enemy could
    read the message, they would certainly not let the messenger deliver it. A thorough
    examination of the whole letter versus broken letter issue can be found at [cryptiana.web.fc2.com/code/scytale.htm](http://cryptiana.web.fc2.com/code/scytale.htm).
    In 1841, Edgar Allan Poe, who was a talented cryptographer, wrote an essay, “A
    Few Words on Secret Writing,” which gives a good description of the skytale and
    his method for decrypting these messages by matching up the broken fragments of
    letters.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个有趣的注释：如果你在维基百科和其他网站上查找 *skytale*，它说 skytale 被用来通过在带子的一个转动内写每个字母来生成换位密码。这是错误的。这样的带子很容易被识别为密码信息。无论敌人能否读懂这条消息，他们肯定不会让信使传递它。关于整个字母与断开字母问题的彻底审查可以在
    [cryptiana.web.fc2.com/code/scytale.htm](http://cryptiana.web.fc2.com/code/scytale.htm)
    找到。1841 年，埃德加·爱伦·坡，一个才华横溢的密码学家，写了一篇名为“关于秘密写作的几句话”的论文，其中描述了 skytale 和他通过匹配断裂字母碎片来解密这些消息的方法。
- en: To compound this error, if you look up “transposition cipher” in Wikipedia,
    it says that the skytale was used to produce a “rail fence cipher,” also called
    a “zigzag cipher.” A rail fence cipher has columns that alternate up and down.
    Writing a message either along or around a rod does not involve any changes of
    direction. So, if a skytale were used to produce a transposition cipher, the result
    could be a columnar transposition, never a rail fence. (I corrected these errors
    in Wikipedia, but my corrections were deleted. I have given up trying to be the
    Wikipedia Police.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步弄错，如果你在维基百科中查找“换位密码”，它说 skytale 被用来制造“栅栏密码”，也称为“锯齿密码”。栅栏密码有交替向上和向下的列。在棒子上写信息不涉及任何方向的改变。因此，如果使用
    skytale 生成换位密码，结果可能是列置换，而不是栅栏。 （我在维基百科上更正了这些错误，但我的更正被删除了。我已经放弃了试图成为维基百科警察。）
- en: A 1960s version of the skytale was to sort a deck of computer punch cards, write
    the message in pencil on an outer surface of the deck, and then thoroughly shuffle
    the deck, leaving just scattered dots. When the deck was run through a card sorting
    machine, the cards would be restored to the original order, and the message could
    be read. This idea was widely discussed by programmers, but I do not know if it
    was ever put into practice. Another modern equivalent is to write the message
    on the blank back of a jigsaw puzzle and then scramble the pieces. The receiver
    needs to solve the puzzle and then flip it over to read the message.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪60年代的一种天线是对一叠计算机打孔卡进行排序，用铅笔在卡片的外表面写下消息，然后彻底洗牌，只留下零散的点。当卡片通过卡片分类机时，卡片将恢复到原始顺序，消息可以被读取。程序员们广泛讨论了这个想法，但我不知道它是否被实践过。另一个现代等价物是在拼图的空白背面写下消息，然后打乱拼图块。接收者需要解决拼图，然后翻转它以阅读消息。
- en: Another mechanical cipher was the Jefferson Wheel Cypher invented by Thomas
    Jefferson some time between 1790 and 1793\. It consisted of 36 same-sized wooden
    disks threaded on an iron rod to form a wooden cylinder. Around the exposed edge
    of each disk, the 26 letters of the alphabet were written in some scrambled order.
    The disks could be rotated independently to spell any message. Versions of the
    Jefferson cipher using disks or paper strips were used as recently as the 1960s.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种机械密码是托马斯·杰斐逊在1790年至1793年间发明的杰斐逊轮密码机。它由36个相同大小的木制圆盘穿在一根铁棒上形成一个木制圆柱。在每个盘的外缘，按某种乱序写有26个字母。盘可以独立旋转以拼写任何消息。使用盘或纸条的杰斐逊密码的版本直到20世纪60年代仍在使用。
- en: Many types of disk ciphers were developed from the 15th through the 19th centuries.
    The most common type used several thin flat concentric disks that could be rotated
    around a center pivot. Each disk had the alphabet or some set of numbers or symbols
    written in some order around the rim of its upper face. The disks got progressively
    smaller so that all of the alphabets could be seen at the same time. The disks
    were aligned in some position, and encipherment consisted of finding the plaintext
    letter on one of the disks, then using the corresponding letter or symbol on one
    of the other disks as the ciphertext letter. Later types of disk ciphers advanced
    the inner disk after each letter was enciphered, either manually or through a
    clockwork mechanism.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从15世纪到19世纪，许多类型的盘式密码机被发展出来。最常见的类型使用几个薄平面同心圆盘，可以围绕中心枢轴旋转。每个盘的上表面边缘写有字母或某些数字或符号，按某种顺序。盘逐渐变小，以便同时看到所有字母表。盘被对齐在某个位置，加密包括在一个盘上找到明文字母，然后使用另一个盘上对应的字母或符号作为密文字母。后来的盘式密码机在每个字母被加密后，手动或通过钟表机构推进内盘。
- en: This is a picture of the Leon Battista Alberti cipher disk drawn by Augusto
    Buonafalce, from his 1467 book, *De compendis cifri*. (Image distributed by Wikimedia
    Commons.)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是奥古斯托·布纳法尔切绘制的莱昂·巴蒂斯塔·阿尔贝蒂密码盘的图片，取自他1467年的著作*De compendis cifri*。（图片由维基共享资源分发。）
- en: '![2-unnumb-5](../Images/2-unnumb-5.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![2-unnumb-5](../Images/2-unnumb-5.png)'
- en: Starting in 1915, a long series of electromechanical rotor ciphers were invented.
    The most famous is the Enigma machine developed in the 1920s by German engineer
    Arthur Scherbius. Dozens of types were marketed up through the start of the computer
    era. They all produced stream ciphers. The basic idea was that the substitute
    for a letter was determined by the path that the electric current took through
    the series of turning rotors. After each letter was enciphered, some of the rotors
    turned, controlled by various cams, gears, lugs and pawls to change the substitutions
    in myriad ways. So, if the word INFANTRY came out as **PMRNQGFW**, that might
    not happen again for billions of turns.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从1915年开始，一系列长期的电机机械转子密码机被发明出来。最著名的是20世纪20年代由德国工程师阿瑟·谢比乌斯开发的恩尼格玛机。直到计算机时代开始，几十种类型的密码机被推出市场。它们都产生流密码。基本思想是，字母的替代品由电流通过一系列旋转转子的路径确定。每个字母被加密后，一些转子转动，由各种凸轮、齿轮、凸耳和爪控制，以各种方式改变替代品。因此，如果单词INFANTRY变成**PMRNQGFW**，可能在数十亿次转动后不会再次发生。
- en: Since the 1960s, cryptography has become increasingly computerized and digital.
    The Data Encryption Standard (DES) was developed by IBM in 1975 and certified
    by the National Bureau of Standards in 1977\. This touched off a series of block
    ciphers with names like Serpent and Twofish, culminating in the Advanced Encryption
    Standard (AES) adopted by the National Institute of Standards and Technology (NIST)
    in 2001\. This class of ciphers is covered in chapter 11.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1960 年代以来，密码学变得越来越计算机化和数字化。数据加密标准（DES）是由 IBM 在 1975 年开发的，并在 1977 年获得了国家标准局的认证。这引发了一系列带有名称的分组密码，如
    Serpent 和 Twofish，最终以 2001 年由国家标准技术研究所（NIST）采用的高级加密标准（AES）告终。这类密码在第 11 章中涵盖。
- en: The progression has been from manual ➔ mechanical ➔ electromechanical ➔ digital.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 进展已经从手动 ➔ 机械 ➔ 电动机械 ➔ 数字化。
- en: 2.6 Why choose Secret Key?
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择秘密密钥？
- en: In this era of Public Key cryptography, the question naturally arises, why would
    anyone choose Secret Key cryptography? There are several reasons.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个公钥密码学时代，自然会产生一个问题，为什么有人会选择秘密密钥密码学？有几个原因。
- en: Secret Key cryptography is much faster. Even the strongest, most complex Secret
    Key methods tend to be hundreds or even thousands of times faster than the leading
    Public Key methods. In fact, the main use of Public Key cryptography is to encrypt
    keys for Secret Key cryptography. The keys are sent using Public Key methods,
    but the messages themselves are sent using Secret Key methods.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密密钥密码学速度更快。即使是最强大、最复杂的秘密密钥方法，其速度也往往是领先的公钥方法的数百甚至数千倍。事实上，公钥密码学的主要用途是为秘密密钥密码学加密密钥。密钥是使用公钥方法发送的，但消息本身是使用秘密密钥方法发送的。
- en: Public Key cryptography (PKC) requires a Public Key Infrastructure. There must
    be Public Key servers to distribute public keys to potential correspondents. PKC
    is subject to a variety of man-in-the-middle and spoofing attacks, where an opponent
    poses as the sender, and/or the receiver, and/or the key server, so PKC requires
    a great deal of authentication and verification. The person requesting a public
    key must prove membership in the same network as the recipient. The message containing
    the public key must be verified to assure it came from the server. The receiver
    must be authenticated when the public key is first posted on the server and every
    time it is changed. When a new party is added to the network, the person authorizing
    that new party must be authenticated. When a new network is added to a server,
    every party involved must be authenticated. The receiver must verify that the
    received message has not been altered or replaced by some third party. This all
    makes for a profusion of messages.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥密码学（PKC）需要公钥基础设施。必须有公钥服务器将公钥分发给潜在的通信者。PKC 受到各种中间人和欺骗攻击的影响，对手冒充发送者、和/或接收者和/或密钥服务器，因此
    PKC 需要大量的身份验证和验证。请求公钥的人必须证明与接收者在同一网络中。包含公钥的消息必须经过验证，以确保其来自服务器。接收者在首次在服务器上发布公钥时和每次更改时必须进行身份验证。当向网络中添加新方时，必须对授权新方的人进行身份验证。当将新网络添加到服务器时，必须对所涉及的每一方进行身份验证。接收者必须验证接收到的消息未经第三方篡改或替换。所有这些都导致了大量的消息。
- en: Secret Key cryptography can operate without any of that administrative overload.
    Two individual people can exchange secret key messages without involving anyone
    else or any intermediating system. When several people are exchanging Secret Key
    messages, the only authorization required is that each party has the current key.
    An unauthorized person won’t have the keys and can’t read the messages.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 秘钥密码学可以在没有任何行政负担的情况下运作。两个个体可以交换秘密密钥消息，而不需要涉及任何其他人或任何中间系统。当几个人交换秘密密钥消息时，唯一需要的授权是每个参与方都有当前的密钥。未经授权的人将没有密钥，也无法阅读消息。
- en: Exchanging messages is not the only use for cryptography. An equally important
    role is securing the secrecy of data files stored on a computer, on an external
    device such as a flash drive, or in cloud storage, often for a long time. PKC
    cannot be used for this purpose. Only Secret Key methods are suited for keeping
    data files secret.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 交换消息并不是密码学的唯一用途。同样重要的作用是保护存储在计算机上、外部设备（如闪存驱动器）或云存储中的数据文件的机密性，通常需要很长时间。PKC 不能用于此目的。只有秘密密钥方法适用于保持数据文件机密。
- en: When a message needs to be broadcast to many receivers at the same time, this
    can easily be done with Secret Key methods. All that is needed is for each party
    to have the key. They could use a special broadcast key separate from their personal
    keys. Or, each party could be sent the message key by using a separate key-transmission
    key. With Public Key methods, you would need to get the individual public keys
    of all of the recipients, with all of the attendant authorization and verification.
    This cannot be prearranged because the participants are free to change their public
    keys at any time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要向许多接收者同时广播消息时，可以很容易地使用秘钥方法来实现。每个参与方只需拥有秘钥即可。他们可以使用一个特殊的广播秘钥，与他们的个人秘钥分开。或者，每个参与方可以通过使用一个单独的秘钥传输秘钥来发送消息秘钥。使用公钥方法，您需要获取所有接收者的个人公钥，以及所有相关的授权和验证。这不能事先安排，因为参与者可以随时更改他们的公钥。
- en: The most common Public Key method is the RSA method. The strength of this method
    depends on the fact that it is currently very difficult to factor large numbers
    (see section 3.4). Given a 200-digit decimal number with no small prime factors,
    there is currently no feasible way of factoring it. However, when quantum computers
    become available, this will all change. MIT professor Peter Shor developed a quantum
    algorithm that can easily factor a number that size. When that happens, all of
    the RSA messages stored on computers will be able to be read.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的公钥方法是RSA方法。该方法的强度取决于目前很难分解大数的事实（见第3.4节）。给定一个没有小质因数的200位十进制数，目前没有可行的方法来分解它。然而，当量子计算机可用时，这一切都会改变。麻省理工学院教授彼得·肖尔开发了一个可以轻松分解那么大数字的量子算法。当这发生时，存储在计算机上的所有RSA消息都将能够被读取。
- en: There is, so far, no known way to use quantum computers for cracking secret
    key ciphers. If quantum computers are a concern, Secret Key cryptography is the
    only choice.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，尚无已知方法可以利用量子计算机来破解秘钥密码。如果量子计算机是一个问题，秘钥密码学是唯一的选择。
- en: 2.7 Why build your own?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要自己构建？
- en: If you are a cipher hobbyist, it is obvious why you want to build your own ciphers.
    You build your own ciphers because that’s your hobby. Model train hobbyists design,
    build, and run model trains. Model plane fans design, build and fly model planes.
    Cipher hobbyists design, build and solve ciphers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一个密码爱好者，为什么要构建自己的密码是显而易见的。您构建自己的密码是因为这是您的爱好。模型火车爱好者设计、构建和运行模型火车。模型飞机爱好者设计、构建和飞行模型飞机。密码爱好者设计、构建和解密密码。
- en: If you are a cryptography student, building your own cipher is good training.
    It is the best way to learn how to build and how to evaluate ciphers. The current
    standard cipher, AES (section 11.5), will not last forever, and somebody will
    need to design its replacement. If you want to be part of that effort, this book
    may be your best starting point.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一个密码学学生，构建自己的密码是很好的训练。这是学习如何构建和评估密码的最佳方式。当前标准密码AES（第11.5节）不会永远持续下去，必须有人设计它的替代品。如果您想成为这一努力的一部分，这本书可能是您最好的起点。
- en: If you are a serious cryptographer with responsibilities for protecting high-value
    data and communications, you might build your own ciphers out of a healthy skepticism
    that the government-approved ciphers are as safe and secure as your government
    claims. Let me give you one story that will support your doubts.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一名负责保护高价值数据和通信的严肃密码学家，您可能会出于对政府批准的密码是否像您的政府声称的那样安全的健康怀疑而构建自己的密码。让我给您一个故事来支持您的怀疑。
- en: Circa 1975, IBM proposed the cipher now called DES, the Data Encryption Standard.
    It became a worldwide standard for secret key encryption. As IBM originally designed
    it, DES had a 64-bit key. The National Security Agency (NSA) required that the
    key be reduced from 64 bits to 56 bits, with the other 8 bits used as a checksum.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在1975年，IBM提出了现在称为DES的密码，即数据加密标准。它成为了全球标准的秘钥加密。正如IBM最初设计的那样，DES具有64位秘钥。国家安全局（NSA）要求将秘钥从64位减少到56位，并将其他8位用作校验和。
- en: This made no sense. If a checksum were really needed, then the key could be
    increased from 64 to 72 bits. It was widely believed that the real reason the
    NSA made this demand was that it knew how to crack messages using a 56-bit key,
    but not messages using a 64-bit key. This proved to be true.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这毫无意义。如果真的需要一个校验和，那么秘钥可以从64位增加到72位。人们普遍认为，NSA提出这一要求的真正原因是它知道如何破解使用56位秘钥的消息，但不知道如何破解使用64位秘钥的消息。这被证明是真实的。
- en: You could reasonably conclude that the NSA would never approve any encryption
    standard that it could not crack. In that case, you could infer that the NSA can
    crack all of the different forms of AES. And if the NSA can crack AES, then it
    is likely that its Russian and Chinese counterparts can crack AES as well.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以合理地得出结论，NSA绝不会批准任何它无法破解的加密标准。在这种情况下，你可以推断NSA可以破解所有不同形式的AES。如果NSA可以破解AES，那么它的俄罗斯和中国的对手很可能也可以破解AES。
- en: There are just a handful of experts who construct the candidate ciphers from
    which the worldwide standard ciphers are selected. It is well-known that these
    experts receive briefings at NSA headquarters in Fort Meade, Maryland. During
    these meetings, NSA personnel advise them of techniques that might either strengthen
    or weaken the ciphers. It is possible that hidden among the recommended methods
    is some backdoor that lets the NSA, and only the NSA, solve these ciphers easily.
    It is also plausible that the NSA could offer jobs, contracts and research grants
    that might induce the experts to adopt those vulnerable methods.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数几位专家构建候选密码，从中选择全球标准密码。众所周知，这些专家在马里兰州的NSA总部Fort Meade接受简报。在这些会议期间，NSA人员向他们提供可能加强或削弱密码的技术。可能隐藏在推荐方法中的是一些后门，让NSA，只有NSA，能够轻松解决这些密码。NSA还可能提供工作、合同和研究资助，可能诱使专家采用那些脆弱的方法。
- en: There is a good bit of speculation here, but cryptographers tend to be very
    conservative. If you can imagine a plausible weakness or vulnerability, whether
    or not your opponent can realistically exploit it, it is best to guard against
    it whenever you can.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多猜测，但密码学家往往非常保守。如果你能想象出一个可能的弱点或漏洞，无论你的对手是否真的能够利用它，最好在能够时防范。
- en: Finally, you might just be after speed, simpler implementation, or cheaper hardware.
    You might want to construct your own ciphers to achieve these goals without giving
    up security. You will find methods in this book that can help you do that.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能只是追求速度、更简单的实现或更便宜的硬件。你可能想构建自己的密码来实现这些目标而不放弃安全性。你会在这本书中找到可以帮助你做到这一点的方法。
- en: That said, remember that there are plenty of pitfalls. Don’t just create a cipher
    and assume it is “strong enough.” Lots of ciphers turn out to have unexpected
    weaknesses. Even the strongest cipher can be defeated by operator errors, such
    as starting every message with a standard header, frequently reusing keys, or
    sending the identical message using different keys. For example, many German messages
    were solved during WW II because they all began, “Heil Hitler.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，请记住存在许多陷阱。不要仅仅创建一个密码并假设它足够“强大”。许多密码最终被发现存在意想不到的弱点。即使是最强大的密码也可能被操作员的错误所击败，比如每条消息都以标准头部开始，频繁重用密钥，或者使用不同密钥发送相同消息。例如，许多德国消息在二战期间被解密，因为它们都以“希特勒万岁”开始。
- en: This book contains all the information you need to construct an unbreakable
    cipher, but remember that reading only one book about cryptography will not make
    you an expert overnight. Be sure to check the strength of your cipher using the
    principles detailed in chapter 12.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书包含了构建不可破解密码所需的所有信息，但请记住，仅阅读一本关于密码学的书并不会让你一夜之间成为专家。一定要使用第12章详细介绍的原则来检查你的密码的强度。
