- en: 1 Defense in depth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 深度防御
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖
- en: Defining your attack surface
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义你的攻击面
- en: Introducing defense in depth
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入深度防御
- en: Adhering to standards, best practices, and fundamentals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵守标准、最佳实践和基本原则
- en: Identifying Python security tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别Python安全工具
- en: You trust organizations with your personal information more now than ever before.
    Unfortunately, some of these organizations have already surrendered your information
    to attackers. If you find this hard to believe, visit [https://haveibeenpwned.com](https://haveibeenpwned.com).
    This site allows you to easily search a database containing the email addresses
    for billions of compromised accounts. With time, this database will only grow
    larger. As software users, we have developed an appreciation for security through
    this common experience.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在比以往任何时候都更加信任组织保管你的个人信息。不幸的是，其中一些组织已经将你的信息交给了攻击者。如果你觉得难以置信，可以访问[https://haveibeenpwned.com](https://haveibeenpwned.com)。这个网站允许你轻松搜索一个包含数十亿被入侵账户的电子邮件地址的数据库。随着时间的推移，这个数据库只会变得更大。作为软件用户，通过这种共同经历，我们对安全有了一定的认识。
- en: Because you’ve opened this book, I’m betting you appreciate security for an
    additional reason. Like me, you don’t just want to use secure systems; you want
    to create them as well. Most programmers value security, but they don’t always
    have the background to make it happen. I wrote this book to provide you with a
    tool set for building this background.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你打开了这本书，我敢打赌你对安全有了额外的认识。和我一样，你不仅想使用安全系统；你也想创建它们。大多数程序员重视安全，但他们并不总是有能力实现。我写这本书是为了为你提供一个建立这种背景的工具集。
- en: '*Security* is the ability to resist attack. This chapter decomposes security
    from the outside in, starting with attacks. The subsequent chapters cover the
    tools you need to implement layers of defense, from the inside out, in Python.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*安全*是抵抗攻击的能力。本章从外部向内部分解安全性，从攻击开始。随后的章节涵盖了你在Python中实现防御层所需的工具。'
- en: Every attack begins with an entry point. The sum of all entry points for a particular
    system is known as the *attack surface*. Beneath the attack surface of a secure
    system are layers of security, an architectural design known as *defense in depth*.
    Defense layers adhere to standards and best practices to ensure security fundamentals.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每次攻击都始于一个入口点。一个特定系统的所有入口点的总和被称为*攻击面*。在一个安全系统的攻击面下面是安全层，一种被称为*深度防御*的架构设计。防御层遵循标准和最佳实践，以确保安全基础。
- en: 1.1 Attack surface
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 攻击面
- en: Information security has evolved from a handful of dos and don’ts into a complex
    discipline. What drives this complexity? Security is complex because attacks are
    complex; it is complex out of necessity. Attacks today come in so many shapes
    and sizes. We must develop an appreciation for attacks before we can develop secure
    systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 信息安全已经从一小部分的做和不做发展成为一个复杂的学科。是什么驱使了这种复杂性？安全是复杂的，因为攻击是复杂的；出于必要性，它是复杂的。如今的攻击形式多种多样。在我们能够开发安全系统之前，我们必须对攻击有所了解。
- en: As I noted in the preceding section, every attack begins with a vulnerable entry
    point, and the sum of all potential entry points is your *attack surface*. Every
    system has a unique attack surface.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在前一节中所指出的，每次攻击都始于一个易受攻击的入口点，所有潜在入口点的总和就是你的*攻击面*。每个系统都有一个独特的攻击面。
- en: Attacks, and attack surfaces, are in a steady state of flux. Attackers become
    more sophisticated over time, and new vulnerabilities are discovered on a regular
    basis. Protecting your attack surface is therefore a never-ending process, and
    an organization’s commitment to this process should be continuous.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击和攻击面处于不断变化的状态。攻击者随着时间变得更加复杂，新的漏洞也会定期被发现。保护你的攻击面因此是一个永无止境的过程，一个组织对这一过程的承诺应该是持续的。
- en: 'The entry point of an attack can be a user of the system, the system itself,
    or the network between the two. For example, an attacker may target the user via
    email or chat as an entry point for some forms of attack. These attacks aim to
    trick the user into interacting with malicious content designed to take advantage
    of a vulnerability. These attacks include the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的入口点可以是系统的用户、系统本身，或者两者之间的网络。例如，攻击者可能通过电子邮件或聊天来针对用户作为某些形式攻击的入口点。这些攻击旨在诱使用户与恶意内容互动，以利用漏洞。这些攻击包括以下内容：
- en: Reflective cross-site scripting (XSS)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射性跨站脚本（XSS）
- en: Social engineering (e.g., phishing, smishing)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社会工程（例如，网络钓鱼，短信欺诈）
- en: Cross-site request forgery
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站请求伪造
- en: Open redirect attack
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放重定向攻击
- en: 'Alternatively, an attacker may target the system itself as an entry point.
    This form of attack is often designed to take advantage of a system with insufficient
    input validation. Classic examples of these attacks are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，攻击者可能以系统本身为入口点进行攻击。这种形式的攻击通常旨在利用输入验证不足的系统。这些攻击的经典示例如下：
- en: Structured Query Language (SQL) injection
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化查询语言（SQL）注入
- en: Remote code execution
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程代码执行
- en: Host header attack
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机头攻击
- en: Denial of service
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务
- en: 'An attacker may target a user and the system together as entry points for attacks
    such as persistent cross-site scripting or clickjacking. Finally, an attacker
    may use a network or network device between the user and the system as an entry
    point:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可能以用户和系统一起作为入口点，进行诸如持久性跨站脚本或点击劫持等攻击。最后，攻击者可能使用用户和系统之间的网络或网络设备作为入口点：
- en: Man-in-the-middle attack
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: Replay attack
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重放攻击
- en: This book teaches you how to identify and resist these attacks, some of which
    have a whole chapter dedicated to them (XSS arguably has two chapters). Figure
    1.1 depicts an attack surface of a typical software system. Four attackers simultaneously
    apply pressure to this attack surface, illustrated by dashed lines. Try not to
    let the details overwhelm you. This is meant to provide you with only a high-level
    overview of what to expect. By the end of this book, you will understand how each
    of these attacks works.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书教会你如何识别和抵御这些攻击，其中一些攻击有一个专门的章节（XSS有可能有两个章节）。图1.1描绘了一个典型软件系统的攻击表面。四名攻击者同时向这个攻击表面施加压力，用虚线表示。尽量不要被细节淹没。这只是为你提供一个高层次概述。到本书结束时，你将了解每种攻击是如何工作的。
- en: '![CH01_F01_Byrne](Images/CH01_F01_Byrne.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![CH01_F01_Byrne](Images/CH01_F01_Byrne.png)'
- en: Figure 1.1 Four attackers simultaneously apply pressure to an attack surface
    via the user, system, and network.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 四名攻击者同时通过用户、系统和网络对攻击表面施加压力。
- en: Beneath the attack surface of every secure system are layers of defense; we
    don’t just secure the perimeter. As noted at the start of this chapter, this layered
    approach to security is commonly referred to as *defense in* *depth*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个安全系统的攻击表面下都有防御层；我们不只是保护周边。正如本章开头所述，这种分层的安全方法通常称为*防御深度*。
- en: 1.2 Defense in depth
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 防御深度
- en: 'Defense in depth, a philosophy born from within the National Security Agency,
    maintains that a system should address threats with layers of security. Each layer
    of security is dual-purpose: it resists an attack, and it acts as a backup when
    other layers fail. We never put our eggs in one basket; even good programmers
    make mistakes, and new vulnerabilities are discovered on a regular basis.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 防御深度，一种源自国家安全局内部的哲学，认为系统应该通过多层安全来应对威胁。每一层安全都是双重目的：它抵御攻击，并在其他层失败时充当备份。我们从不把所有的鸡蛋放在一个篮子里；即使是优秀的程序员也会犯错误，而且定期会发现新的漏洞。
- en: Let’s first explore defense in depth metaphorically. Imagine a castle with one
    layer of defense, an army. This army regularly defends the castle against attackers.
    Suppose this army has a 10% chance of failure. Despite the army’s strength, the
    king isn’t comfortable with the current risk level. Would you or I be comfortable
    with a system unfit to resist 10% of all attacks? Would our users be comfortable
    with this?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过比喻来探讨防御的深度。想象一座只有一层防御的城堡，即一支军队。这支军队经常保卫城堡免受攻击者的攻击。假设这支军队有10%的失败几率。尽管军队很强大，国王对当前的风险水平感到不安。你或我能否接受一个无法抵御所有攻击的系统？我们的用户能否接受这一点？
- en: The king has two options to reduce risk. One option is to strengthen the army.
    This is possible but not cost-efficient. Eliminating the last 10% of risk is going
    to be a lot more expensive than eliminating the first 10% of risk. Instead of
    strengthening the army, the king decides to add another layer of defense by building
    a moat around the castle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 国王有两个选项来降低风险。一个选择是加强军队。这是可能的，但不是经济有效的。消除最后10%的风险将比消除前10%的风险显然要昂贵得多。国王决定不是加强军队，而是通过在城堡周围挖掘一道护城河来增加另一层防御。
- en: How much risk is reduced by the moat? Both the army and the moat must fail before
    the castle can be captured, so the king calculates risk with simple multiplication.
    If the moat, like the army, has a 10% chance of failure, each attack has a 10%
    × 10%, or 1%, chance of success. Imagine how much more expensive it would have
    been to build an army with a 1% chance of failure than it was to just dig a hole
    in the ground and fill it with water.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 护城河能减少多少风险？只有军队和护城河都失败了，城堡才会被攻陷，因此国王用简单的乘法计算风险。如果像军队一样，护城河有 10% 的失败几率，那么每次攻击成功的几率就是
    10% × 10%，或者 1%。想象一下，与建造一个有 1% 失败几率的军队相比，仅仅挖个坑并注水填满要花多少钱。
- en: Finally, the king builds a wall around the castle. Like the army and moat, this
    wall has a 10% chance of failure. Each attack now has a 10% × 10% × 10%, or 0.1%,
    chance of success.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，国王在城堡周围修建了一堵墙。像军队和护城河一样，这堵墙有 10% 的失败几率。现在，每次攻击的成功几率是 10% × 10% × 10%，或者 0.1%。
- en: The cost-benefit analysis of defense in depth boils down to arithmetic and probability.
    Adding another layer is always more cost-effective than trying to perfect a single
    layer. Defense in depth recognizes the futility of perfection; this is a strength,
    not a weakness.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 防御的成本效益分析归结为算术和概率。增加另一层始终比试图完善单一层更具成本效益。深度防御认识到完美的徒劳；这是一种优势，而不是一种弱点。
- en: Over time, an implementation of a defense layer becomes more successful and
    popular than others; there are only so many ways to dig a moat. A common solution
    to a common problem emerges. The security community begins to recognize a pattern,
    and a new technology graduates from experimental to standardized. A standards
    body evaluates the pattern, argues about the details, defines a specification,
    and a security standard is born.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，一种防御层的实现比其他层更成功和流行；挖护城河的方式有限。一个常见问题的常见解决方案出现了。安全社区开始认识到一个模式，并且一种新技术从实验性发展到标准化。标准化机构评估该模式，讨论细节，定义规范，一个安全标准就诞生了。
- en: 1.2.1 Security standards
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.1 安全标准
- en: 'Many successful security standards have been established by organizations such
    as the National Institute of Standards and Technology (NIST), the Internet Engineering
    Task Force (IETF), and the World Wide Web Consortium (W3C). With this book, you’ll
    learn how to defend a system with the following standards:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多成功的安全标准是由国家标准与技术研究院（NIST）、互联网工程任务组（IETF）和万维网联盟（W3C）等组织建立的。通过本书，你将学习如何使用以下标准来保护系统：
- en: '*Advanced Encryption Standard* (*AES*)—A symmetric encryption algorithm'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高级加密标准* (*AES*) — 一种对称加密算法。'
- en: '*Secure Hash Algorithm 2* (*SHA-2*)—A family of cryptographic hash functions'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安全哈希算法 2* (*SHA-2*) — 一族密码哈希函数。'
- en: '*Transport Layer Security* (*TLS*)—A secure networking protocol'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*传输层安全* (*TLS*) — 一种安全的网络协议。'
- en: '*OAuth 2.0*—An authorization protocol for sharing protected resources'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*OAuth 2.0* — 一种用于共享受保护资源的授权协议。'
- en: '*Cross-Origin Resource Sharing* (*CORS*)—A resource-sharing protocol for browsers'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跨源资源共享* (*CORS*) — 浏览器的资源共享协议。'
- en: '*Content Security Policy* (*CSP*)—A browser-based attack mitigation standard'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内容安全策略* (*CSP*) — 一种基于浏览器的攻击缓解标准。'
- en: Why standardize? Security standards provide programmers with a common language
    for building secure systems. A common language allows different people from different
    organizations to build interoperable secure software with different tools. For
    example, a web server delivers the same TLS certificate to every kind of browser;
    a browser can understand a TLS certificate from every kind of web server.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要标准化？安全标准为程序员提供了一个构建安全系统的共同语言。共同语言使来自不同组织的不同人员能够使用不同工具构建可互操作的安全软件。例如，一个 web
    服务器向每种类型的浏览器提供相同的 TLS 证书；浏览器可以理解来自每种类型的 web 服务器的 TLS 证书。
- en: Furthermore, standardization promotes code reuse. For example, `oauthlib` is
    a generic implementation of the OAuth standard. This library is wrapped by both
    Django OAuth Toolkit and `flask-oauthlib`, allowing both Django and Flask applications
    to make use of it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，标准化促进了代码重用。例如，`oauthlib` 是 OAuth 标准的通用实现。这个库被 Django OAuth Toolkit 和 `flask-oauthlib`
    包装，允许 Django 和 Flask 应用程序都使用它。
- en: 'I’ll be honest with you: standardization doesn’t magically solve every problem.
    Sometimes a vulnerability is discovered decades after everyone has embraced the
    standard. In 2017, a group of researchers announced they had broken SHA-1 ([https://shat
    tered.io/](https://shattered.io/)), a cryptographic hash function that had previously
    enjoyed more than 20 years of industry adoption. Sometimes vendors don’t implement
    a standard within the same time frame. It took years for each major browser to
    support certain CSP features. Standardization does work most of the time, though,
    and we can’t afford to ignore it.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我会坦诚地告诉你：标准化并不能神奇地解决每个问题。有时候，一个漏洞是在大家都接受标准几十年后才被发现的。2017年，一组研究人员宣布他们已经破解了 SHA-1
    ([https://shat tered.io/](https://shattered.io/))，一个之前享受了 20 多年行业应用的加密哈希函数。有时候，供应商不会在相同的时间范围内实施标准。每个主要浏览器支持某些
    CSP 功能花了好几年的时间。尽管如此，标准化大部分时间确实是有效的，我们不能忽视它。
- en: Several best practices have evolved to complement security standards. Defense
    in depth is itself a best practice. Like standards, best practices are observed
    by secure systems; unlike standards, there is no specification for best practices.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 几个最佳实践已经发展出来以补充安全标准。防御深度本身就是一种最佳实践。像标准一样，安全系统遵循最佳实践；与标准不同，最佳实践没有具体规范。
- en: 1.2.2 Best practices
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.2 最佳实践
- en: '*Best* *practices* are not the product of standards bodies; instead they are
    defined by memes, word of mouth, and books like this one. These are things you
    just have to do, and you’re on your own sometimes. By reading this book, you will
    learn how to recognize and pursue these best practices:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*最佳实践* 不是由标准机构制定的产品；相反，它们是由模因、口口相传和像这本书一样的书定义的。这些是你必须做的事情，有时候你是独自一人。通过阅读本书，你将学会如何识别和追求这些最佳实践：'
- en: Encryption in transit and at rest
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在传输和静止状态下的加密
- en: “Don’t roll your own crypto”
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “不要自己造加密算法”
- en: Principle of least privilege
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小权限原则
- en: Data is either in transit, in process, or at rest. When security professionals
    say, “Encryption in transit and at rest,” they are advising others to encrypt
    data whenever it is moved between computers and whenever it is written to storage.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数据要么在传输中，要么在处理中，要么在静止中。当安全专家说“传输和静止状态下的加密”时，他们建议在数据在计算机之间移动时和写入存储时都进行加密。
- en: When security professionals say, “Don’t roll your own crypto,” they are advising
    you to reuse the work of an experienced expert instead of trying to implement
    something yourself. Relying on tools didn’t become popular just to meet tight
    deadlines and write less code. It became popular for the sake of safety. Unfortunately,
    many programmers have learned this the hard way. You’re going to learn it by reading
    this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当安全专家说“不要自己造加密算法”的时候，他们建议你重用经验丰富的专家的工作，而不是试图自己实现。依赖工具并不仅仅是为了满足紧迫的期限和写更少的代码。它变得流行是为了安全起见。不幸的是，许多程序员通过艰难的方式学到了这一点。通过阅读本书，你也将学会这一点。
- en: The *principle of least privilege* (*PLP*) guarantees that a user or system
    is given only the minimal permissions needed to perform their responsibilities.
    Throughout this book, PLP is applied to many topics such as user authorization,
    OAuth, and CORS.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*最小权限原则*（*PLP*）保证用户或系统仅获得执行其职责所需的最小权限。在本书中，PLP被应用于许多主题，如用户授权、OAuth 和 CORS。'
- en: Figure 1.2 illustrates an arrangement of security standards and best practices
    for a typical software system.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 描述了一个典型软件系统的安全标准和最佳实践的安排。
- en: '![CH01_F02_Byrne](Images/CH01_F02_Byrne.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![CH01_F02_Byrne](Images/CH01_F02_Byrne.png)'
- en: Figure 1.2 Defense in depth applied to a typical system with security standards
    and best practices
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 防御深度应用于具有安全标准和最佳实践的典型系统
- en: No layer of defense is a panacea. No security standard or best practice will
    ever address every security issue by itself. The content of this book, like most
    Python applications, consequently includes many standards and best practices.
    Think of each chapter as a blueprint for an additional layer of defense.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 无一层防御是万能药。没有安全标准或最佳实践能够独立解决所有安全问题。因此，这本书的内容，就像大多数 Python 应用程序一样，包含了许多标准和最佳实践。把每一章都看作是一个额外防御层的蓝图。
- en: Security standards and best practices may look and sound different, but beneath
    the hood, each one is really just a different way to apply the same fundamentals.
    These fundamentals represent the most atomic units of system security.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安全标准和最佳实践可能看起来听起来不同，但在幕后，每一个都只是应用相同基本原理的不同方式。这些基本原理代表了系统安全的最原子单位。
- en: 1.2.3 Security fundamentals
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.3 安全基础
- en: '*Security* *fundamentals* appear in secure system design and in this book over
    and over again. The relationship between arithmetic, and algebra or trigonometry
    is analogous to the relationship between security fundamentals, and security standards
    or best practices. By reading this book, you will learn how to secure a system
    by combining these fundamentals:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*安全基础知识*反复出现在安全系统设计和本书中。算术与代数或三角函数之间的关系类似于安全基础知识与安全标准或最佳实践之间的关系。通过阅读本书，您将学习如何通过结合这些基础知识来保护系统：'
- en: '*Data integrity*—Has the data changed?'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据完整性*—数据是否改变了？'
- en: '*Authentication*—Who are you?'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*认证*—你是谁？'
- en: '*Data authentication*—Who created this data?'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据认证*—谁创作了这个数据？'
- en: '*Nonrepudiation*—Who did what?'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*不可否认性*—谁做了什么？'
- en: '*Authorization*—What can you do?'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*授权*—你可以做什么？'
- en: '*Confidentiality*—Who can access this?'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*机密性*—谁可以访问这个？'
- en: '*Data integrity*, sometimes referred to as *message integrity*, ensures that
    data is free of accidental corruption (bit rot). It answers the question, “Has
    the data changed?” Data integrity guarantees that data is read the way it was
    written. A data reader can verify the integrity of the data regardless of who
    authored it.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据完整性*，有时也称为*消息完整性*，确保数据没有意外损坏（比特腐败）。它回答了“数据是否改变了？”的问题。数据完整性保证了数据被读取的方式与其被写入的方式相同。数据读者可以验证数据的完整性，无论谁创作了它。'
- en: '*Authentication* answers the question, “Who are you?” We engage in this activity
    on a daily basis; it is the act of verifying the identity of someone or something.
    Identity is verified when a person can successfully respond to a username and
    password challenge. Authentication isn’t just for people, though; machines can
    be authenticated as well. For example, a continuous integration server authenticates
    before it pulls changes from a code repository.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*认证*回答了“你是谁？”的问题。我们每天都在进行这项活动；这是验证某人或某物身份的行为。当一个人能成功回应用户名和密码的挑战时，身份得到了验证。不过，认证不仅仅适用于人，机器也可以被认证。例如，一个持续集成服务器在从代码仓库拉取更改之前进行身份验证。'
- en: '*Data authentication*, often called *message authentication*, ensures that
    a data reader can verify the identity of the data writer. It answers the question,
    “Who authored this data?” As with data integrity, data authentication applies
    when the data reader and writer are different parties, as well as when the data
    reader and writer are the same.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据认证*，通常称为*消息认证*，确保数据读者可以验证数据写入者的身份。它回答了“谁创作了这个数据？”的问题。与数据完整性一样，当数据读者和写入者不同时，以及当数据读者和写入者相同时，数据认证也适用。'
- en: '*Nonrepudiation* answers the question, “Who did what?” It is the assurance
    that an individual or an organization has no way of denying their actions. Nonrepudiation
    can be applied to any activity, but it is crucial for online transactions and
    legal agreements.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*不可否认性*回答了“谁做了什么？”的问题。它保证了个人或组织没有否认其行为的方式。不可否认性可以应用于任何活动，但对于在线交易和法律协议至关重要。'
- en: '*Authorization*, sometimes referred to as *access control*, is often confused
    with authentication. These two terms sound similar but represent different concepts.
    As noted previously, authentication answers the question, “Who are you?” Authorization,
    in contrast, answers the question, “What can you do?” Reading a spreadsheet, sending
    an email, and canceling an order are all actions that a user may or may not be
    authorized to do.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*授权*，有时也称为*访问控制*，经常与认证混淆。这两个术语听起来相似，但代表着不同的概念。正如先前所述，认证回答了“你是谁？”的问题。而授权则回答了“你可以做什么？”的问题。阅读电子表格、发送电子邮件和取消订单都是用户可能被授权或未被授权做的操作。'
- en: '*Confidentiality* answers the question, “Who can access this?” This fundamental
    ensures that two or more parties can exchange data privately. Information transmitted
    confidentially cannot be read or interpreted by unauthorized parties in any meaningful
    way.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*机密性*回答了“谁可以访问这个？”的问题。这个基础保证了两个或更多方可以私下交换数据。以保密方式传输的信息不能被未经授权的任何方以任何有意义的方式阅读或解释。'
- en: This book teaches you to construct solutions with these building blocks. Table
    1.1 lists each building block and the solutions it maps to.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本书教会您如何使用这些基础知识构建解决方案。表 1.1 列出了每个基础知识和其对应的解决方案。
- en: Table 1.1 Security fundamentals
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1 安全基础知识
- en: '| Building block | Solutions |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 建筑块 | 解决方案 |'
- en: '| Data integrity | Secure networking protocolsVersion controlPackage management
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 数据完整性 | 安全网络协议版本控制包管理 |'
- en: '| Authentication | User authenticationSystem authentication |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 认证 | 用户认证系统认证 |'
- en: '| Data authentication | User registrationUser-login workflowsPassword-reset
    workflowsUser-session management |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 数据认证 | 用户注册用户登录工作流密码重置工作流用户会话管理 |'
- en: '| Nonrepudiation | Online transactionsDigital signaturesTrusted third parties
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 不可否认性 | 在线交易数字签名可信第三方 |'
- en: '| Authorization | User authorizationSystem-to-system authorizationFilesystem-access
    authorization |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 授权 | 用户授权系统对系统授权文件系统访问授权 |'
- en: '| Confidentiality | Encryption algorithmsSecure networking protocols |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 机密性 | 加密算法安全网络协议 |'
- en: Security fundamentals complement each other. Each one is not very useful by
    itself, but they are powerful when combined. Let’s consider some examples. Suppose
    an email system provides data authentication but not data integrity. As an email
    recipient, you are able to verify the identity of the email sender (data authentication),
    but you can’t be certain as to whether the email has been modified in transit.
    Not very useful, right? What is the point of verifying the identity of a data
    writer if you have no way of verifying the actual data?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安全基础互相补充。单独使用每个基础并不是很有用，但是当它们结合在一起时就变得强大了。让我们考虑一些例子。假设一个电子邮件系统提供数据认证但不提供数据完整性。作为电子邮件接收者，你可以验证电子邮件发送者的身份（数据认证），但你无法确定电子邮件在传输过程中是否被修改。这并不是很有用，对吧？如果你无法验证实际数据，那么验证数据编写者的身份有什么意义呢？
- en: Imagine a fancy new network protocol that guarantees confidentiality without
    authentication. An eavesdropper has no way to access the information you send
    with this protocol (confidentiality), but you can’t be certain of who you’re sending
    data to. In fact, you could be sending data to the eavesdropper. When was the
    last time you wanted to have a private conversation with someone without knowing
    who you’re talking to? Usually, if you want to exchange sensitive information,
    you also want to do this with someone or something you trust.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个新颖的网络协议，它保证了机密性但没有认证。窃听者无法访问你使用该协议发送的信息（机密性），但你无法确定你正在向谁发送数据。事实上，你可能正在向窃听者发送数据。上次你想与某人进行私人对话而不知道你在与谁交谈时是什么时候？通常，如果你想交换敏感信息，你也希望与你信任的人或事物进行交流。
- en: Finally, consider an online banking system that supports authorization but not
    authentication. This bank would always make sure your money is managed by you;
    it just wouldn’t challenge you to establish your identity first. How can a system
    authorize a user without knowing who the user is first? Obviously, neither of
    us would put our money in this bank.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，考虑一个支持授权但不支持认证的在线银行系统。这家银行始终确保你的资金由你管理；它只是不会要求你首先证明你的身份。一个系统如何在不知道用户是谁的情况下授权用户呢？显然，我们中没有人会把钱存入这家银行。
- en: Security fundamentals are the most basic building blocks of secure system design.
    We get nowhere by applying the same one over and over again. Instead, we have
    to mix and match them to build layers of defense. For each defense layer, we want
    to delegate the heavy lifting to a tool. Some of these tools are native to Python,
    and others are available via Python packages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安全基础是安全系统设计的最基本构建模块。我们不能一遍又一遍地应用相同的基础。相反，我们必须混合搭配它们来构建防御层。对于每个防御层，我们希望将繁重的工作委托给工具。其中一些工具是Python的本机工具，其他工具则通过Python包提供。
- en: 1.3 Tools
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 工具
- en: All of the examples in this book were written in Python (version 3.8 to be precise).
    Why Python? Well, you don’t want to read a book that doesn’t age well, and I didn’t
    want to write one. Python is popular and is only getting more popular.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都是用Python编写的（具体来说是3.8版本）。为什么选择Python？嗯，你不想读一本过时的书，我也不想写一本。Python很受欢迎，而且越来越受欢迎。
- en: The *PopularitY of Programming Language* (*PYPL*) *Index* is a measure of programming
    language popularity based on Google Trends data. As of mid-2021, Python is ranked
    number 1 on the PYPL Index ([http://pypl.github.io/PYPL.html](http://pypl.github.io/PYPL.html)),
    with a market share of 30%. Python’s popularity grew more than any other programming
    language in the previous five years.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*编程语言流行度* (*PYPL*) *指数*是基于谷歌趋势数据的编程语言流行度衡量标准。截至2021年中期，Python在PYPL指数（[http://pypl.github.io/PYPL.html](http://pypl.github.io/PYPL.html)）上排名第一，市场份额为30%。在过去五年中，Python的流行度增长超过了其他任何编程语言。'
- en: Why is Python so popular? There are lots of answers to this question. Most people
    seem to agree on two factors. First, Python is a beginner-friendly programming
    language. It is easy to learn, read, and write. Second, the Python ecosystem has
    exploded. In 2017, the Python Package Index (PyPI) reached 100,000 packages. It
    took only two and half years for that number to double.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 Python 如此受欢迎？对于这个问题有很多答案。大多数人似乎都同意有两个因素。首先，Python 是一种适合初学者的编程语言。它易于学习、阅读和编写。其次，Python
    生态系统已经爆炸式增长。2017年，Python 包索引(PyPI)达到了100,000个包。这个数字仅用了两年半的时间就翻了一番。
- en: 'I didn’t want to write a book that covered only Python web security. Consequently,
    some chapters present topics such as cryptography, key generation, and the operating
    system. I explore these topics with a handful of security-related Python modules:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想写一本只涵盖 Python Web 安全的书。因此，一些章节介绍了诸如加密、密钥生成和操作系统等主题。我使用一些与安全相关的 Python 模块探讨这些主题：
- en: '`hashlib` *module* ([https://docs.python.org/3/library/hashlib.html](https://docs.python.org/3/library/hashlib.html))—Python’s
    answer to cryptographic hashing'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashlib` *模块* ([https://docs.python.org/3/library/hashlib.html](https://docs.python.org/3/library/hashlib.html))—Python
    的加密哈希解决方案'
- en: '`secrets` *module* ([https://docs.python.org/3/library/secrets.html](https://docs.python.org/3/library/secrets.html))—Secure
    random number generation'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secrets` *模块* ([https://docs.python.org/3/library/secrets.html](https://docs.python.org/3/library/secrets.html))—安全的随机数生成'
- en: '`hmac` *module* ([https://docs.python.org/3/library/hmac.html](https://docs.python.org/3/library/hmac.html))—Hash-based
    message authentication'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hmac` *模块* ([https://docs.python.org/3/library/hmac.html](https://docs.python.org/3/library/hmac.html))—基于哈希的消息认证'
- en: '`os` *and* `subprocess` *modules* ([https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)
    and [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html))—Your
    gateways to the operating system'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os` *和* `subprocess` *模块* ([https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)
    和 [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html))—连接你与操作系统的门户'
- en: 'Some tools have their own dedicated chapter. Other tools are covered throughout
    the book. Still others make only a brief appearance. You will learn anywhere from
    a little to a lot about the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有些工具有专门的章节，其他工具则遍布全书。还有一些工具仅有简短的介绍。你将学到关于以下工具的一些或许很多的知识：
- en: '`argon2-cffi` ([https://pypi.org/project/argon2-cffi/](https://pypi.org/project/argon2-cffi/))—A
    function used to protect passwords'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argon2-cffi` ([https://pypi.org/project/argon2-cffi/](https://pypi.org/project/argon2-cffi/))—用于保护密码的函数'
- en: '`cryptography` ([https://pypi.org/project/cryptography/](https://pypi.org/project/cryptography/))—A
    Python package for common cryptographic functions'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cryptography` ([https://pypi.org/project/cryptography/](https://pypi.org/project/cryptography/))—一款用于常见加密功能的
    Python 包'
- en: '`defusedxml` ([https://pypi.org/project/defusedxml/](https://pypi.org/project/defusedxml/))—A
    safer way to parse XML'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defusedxml` ([https://pypi.org/project/defusedxml/](https://pypi.org/project/defusedxml/))—一种更安全的解析
    XML 的方法'
- en: '*Gunicorn* ([https://gunicorn.org](https://gunicorn.org))—A web server gateway
    interface written in Python'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gunicorn* ([https://gunicorn.org](https://gunicorn.org))—用 Python 编写的 Web
    服务器网关接口'
- en: '*Pipenv* ([https://pypi.org/project/pipenv/](https://pypi.org/project/pipenv/))—A
    Python package manager with many security features'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pipenv* ([https://pypi.org/project/pipenv/](https://pypi.org/project/pipenv/))—一个带有许多安全功能的
    Python 包管理器'
- en: '`requests` ([https://pypi.org/project/requests/](https://pypi.org/project/requests/))—An
    easy-to-use HTTP library'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests` ([https://pypi.org/project/requests/](https://pypi.org/project/requests/))—一个易于使用的
    HTTP 库'
- en: '`requests-oauthlib` ([https://pypi.org/project/requests-oauthlib/](https://pypi.org/project/requests-oauthlib/))—A
    client-side OAuth 2.0 implementation'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests-oauthlib` ([https://pypi.org/project/requests-oauthlib/](https://pypi.org/project/requests-oauthlib/))—客户端
    OAuth 2.0 实现'
- en: 'Web servers represent a large portion of a typical attack surface. This book
    consequently has many chapters dedicated to securing web applications. For these
    chapters, I had to ask myself a question many Python programmers are familiar
    with: Flask or Django? Both frameworks are respectable; the big difference between
    them is minimalism versus out-of-the-box functionality. Relative to each other,
    Flask defaults to the bare essentials, and Django defaults to full-featured.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器占据了典型攻击面的很大一部分。因此，本书有许多章节专门讨论保护 Web 应用程序的问题。在这些章节中，我不得不问自己一个许多 Python
    程序员熟悉的问题：Flask 还是 Django？这两个框架都值得尊重；它们之间的主要区别是极简主义与开箱即用功能之间的差异。相对于彼此，Flask 默认使用基本功能，而
    Django 默认使用功能丰富的功能。
- en: 'As a minimalist, I like Flask. Unfortunately, it applies minimalism to many
    security features. With Flask, most of your defense layers are delegated to third-party
    libraries. Django, on the other hand, relies less on third-party support, featuring
    many built-in protections that are enabled by default. In this book, I use Django
    to demonstrate web application security. Django, of course, is no panacea; I use
    the following third-party libraries as well:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个极简主义者，我喜欢 Flask。不幸的是，它将极简主义应用到了许多安全功能上。使用 Flask，你的大部分防御层都是委托给第三方库的。另一方面，Django
    则较少依赖第三方支持，具有许多内置的保护功能，默认情况下启用。在这本书中，我使用 Django 来演示 Web 应用程序安全性。当然，Django 不是万能的；我还使用了以下第三方库：
- en: '`django-cors-headers` ([https://pypi.org/project/django-cors-headers/](https://pypi.org/project/django-cors-headers/))—A
    server-side implementation of CORS'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-cors-headers`（[https://pypi.org/project/django-cors-headers/](https://pypi.org/project/django-cors-headers/)）—CORS
    的服务器端实现'
- en: '`django-csp` ([https://pypi.org/project/django-csp/](https://pypi.org/project/django-csp/))—A
    server-side implementation of CSP'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-csp`（[https://pypi.org/project/django-csp/](https://pypi.org/project/django-csp/)）—CSP
    的服务器端实现'
- en: '*Django OAuth* *Toolkit* ([https://pypi.org/project/django-oauth-toolkit/](https://pypi.org/project/django-oauth-toolkit/))—A
    server- side OAuth 2.0 implementation'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Django OAuth Toolkit*（[https://pypi.org/project/django-oauth-toolkit/](https://pypi.org/project/django-oauth-toolkit/)）—OAuth
    2.0 的服务器端实现'
- en: '`django-registration` ([https://pypi.org/project/django-registration/](https://pypi.org/project/django-registration/))—A
    user registration library'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-registration`（[https://pypi.org/project/django-registration/](https://pypi.org/project/django-registration/)）—用户注册库'
- en: Figure 1.3 illustrates a stack composed of this tool set. In this stack, Gunicorn
    relays traffic to and from the user over TLS. User input is validated by Django
    form validation, model validation, and object-relational mapping (ORM); system
    output is sanitized by HTML escaping. `django-cors-headers` and `django-csp` ensure
    that each outbound response is locked down with the appropriate CORS and CSP headers,
    respectively. The `hashlib` and `hmac` modules perform hashing; the `cryptography`
    package performs encryption. `requests-oauthlib` interfaces with an OAuth resource
    server. Finally, Pipenv guards against vulnerabilities in the package repository.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 展示了一个由这套工具组成的栈。在这个栈中，Gunicorn 通过 TLS 中继用户和服务器之间的流量。用户输入通过 Django 表单验证、模型验证和对象关系映射（ORM）进行验证；系统输出通过
    HTML 转义进行清理。`django-cors-headers` 和 `django-csp` 确保每个出站响应都使用适当的 CORS 和 CSP 标头进行锁定。`hashlib`
    和 `hmac` 模块执行哈希运算；`cryptography` 包执行加密操作。`requests-oauthlib` 与 OAuth 资源服务器进行接口交互。最后，Pipenv
    防止包存储库中的漏洞。
- en: '![CH01_F03_Byrne](Images/CH01_F03_Byrne.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![CH01_F03_Byrne](Images/CH01_F03_Byrne.png)'
- en: Figure 1.3 A full stack of common Python components, resisting some form of
    attack at every level
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 一套常见 Python 组件的完整堆栈，在每个层级抵抗某种形式的攻击
- en: 'This book isn’t opinionated about frameworks and libraries; it doesn’t play
    favorites. Try not to take it personally if your favorite open source framework
    was passed up for an alternative. Each tool covered in this book was chosen over
    others by asking two questions:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书对框架和库没有偏见；它不偏袒任何一方。如果你钟爱的开源框架被另一种选择所取代，请不要把它当成个人攻击。这本书涵盖的每个工具都是通过问两个问题来选择的：
- en: '*Is the tool mature?* The last thing either of us should do is bet our careers
    on an open source framework that was born yesterday. I intentionally do not cover
    bleeding-edge tools; it’s called the *bleeding edge* for a reason. By definition,
    a tool in this stage of development cannot be considered secure. For this reason,
    all of the tools in this book are mature; everything here is battle tested.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*这个工具成熟吗？* 我们俩最后不应该把职业生涯押在一个刚出生的开源框架上。我故意不涉及尖端工具；这叫做“尖端”不是没有原因的。按照定义，处于这个开发阶段的工具不能被认为是安全的。因此，这本书中的所有工具都是成熟的；这里的一切都经过了实战考验。'
- en: '*Is the tool popular?* This question has more to do with the future than the
    present, and nothing to do with the past. Specifically, how likely are readers
    going to use the tool in the future? Regardless of which tool I use to demonstrate
    a concept, remember that the most important takeaway is the concept itself.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*这个工具受欢迎吗？* 这个问题与未来比过去更有关系，与过去无关。具体来说，读者在未来使用这个工具的可能性有多大？无论我使用哪种工具来演示一个概念，记住最重要的是概念本身。'
- en: 1.3.1 Staying practical
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.1 保持务实
- en: This is a field manual, not a textbook; I prioritize professionals over students.
    This is not to say the academic side of security is unimportant. It is incredibly
    important. But security and Python are vast subjects. The depth of this material
    has been limited to what is most useful to the target audience.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本实用手册，而不是教科书；我更注重专业人士而不是学生。这并不是说安全的学术方面不重要。它非常重要。但安全和 Python 是广阔的主题。本材料的深度被限制在对目标受众最有用的内容上。
- en: In this book, I cover a handful of functions for hashing and encryption. I do
    not cover the heavy math behind these functions. You will learn how these functions
    behave; you won’t learn how these functions are implemented. I’ll show you how
    and when to use them, as well as when not to use them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我涵盖了一些用于哈希和加密的功能。我不涉及这些功能背后的繁重数学。你将学习这些功能的行为；你不会学到这些功能是如何实现的。我会告诉你何时以及何时不应该使用它们。
- en: Reading this book is going to make you a better programmer, but this alone cannot
    make you a security expert. No single book can do this. Don’t trust a book that
    makes this promise. Read this book and write a secure Python application! Make
    an existing system more secure. Push your code to production with confidence.
    But don’t set your LinkedIn profile title to *cryptographer*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这本书会让你成为一个更好的程序员，但这并不能让你成为一个安全专家。没有一本书能做到这一点。不要相信那些承诺能做到这一点的书。阅读这本书，并写一个安全的
    Python 应用程序！让现有系统更安全。自信地将你的代码推向生产环境。但不要将你的 LinkedIn 资料标题设置为*密码学家*。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: Every attack begins with an entry point, and the sum of these entry points for
    a single system is known as the attack surface.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次攻击都始于一个入口点，对于单个系统，这些入口点的总和被称为攻击面。
- en: Attack complexity has driven the need for defense in depth, an architectural
    approach characterized by layers.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 攻击复杂性推动了深度防御的需求，这是一种以层为特征的架构方法。
- en: Many defense layers adhere to security standards and best practices for the
    sake of interoperability, code reuse, and safety.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多防御层坚持安全标准和最佳实践，以促进互操作性、代码重用和安全性。
- en: Beneath the hood, security standards and best practices are different ways of
    applying the same fundamental concepts.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底层，安全标准和最佳实践是应用相同基本概念的不同方式。
- en: You should strive to delegate the heavy lifting to a tool such as a framework
    or library; many programmers have learned this the hard way.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该努力将繁重的工作委托给像框架或库这样的工具；许多程序员都是通过艰苦的方式学会这一点的。
- en: You will become a better programmer by reading this book, but it will not make
    you a cryptography expert.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过阅读这本书，你会成为一个更好的程序员，但这并不会让你成为一个密码学专家。
