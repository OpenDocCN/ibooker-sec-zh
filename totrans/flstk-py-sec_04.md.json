["```py\n>>> import os\n>>> \n>>> os.urandom(16)\nb'\\x07;`\\xa3\\xd1=wI\\x95\\xf2\\x08\\xde\\x19\\xd9\\x94^'\n```", "```py\n>>> from secrets import token_bytes, token_hex, token_urlsafe\n>>> \n>>> token_bytes(16)                                     \u2776\nb'\\x1d\\x7f\\x12\\xadsu\\x8a\\x95[\\xe6\\x1b|\\xc0\\xaeM\\x91'    \u2776\n>>> \n>>> token_hex(16)                                       \u2777\n'87983b1f3dcc18080f21dc0fd97a65b3'                      \u2777\n>>> \n>>> token_urlsafe(16)                                   \u2778\n'Z_HIRhlJBMPh0GYRcbICIg'                                \u2778\n```", "```py\n$ python -c 'import secrets; print(secrets.token_hex(16))'\n3d2486d1073fa1dcfde4b3df7989da55\n```", "```py\nfrom pathlib import Path\nimport secrets\n\nwords = Path('/usr/share/dict/words').read_text().splitlines()    \u2776\n\npassphrase = ' '.join(secrets.choice(words) for i in range(4))    \u2777\n\nprint(passphrase)\n```", "```py\n>>> from hashlib import blake2b\n>>> \n>>> m = b'same message'\n>>> x = b'key x'                                               \u2776\n>>> y = b'key y'                                               \u2777\n>>> \n>>> blake2b(m, key=x).digest() == blake2b(m, key=x).digest()   \u2778\nTrue                                                           \u2778\n>>> blake2b(m, key=x).digest() == blake2b(m, key=y).digest()   \u2779\nFalse                                                          \u2779\n```", "```py\nimport hashlib\nfrom pathlib import Path\n\ndef store(path, data, key):\n    data_path = Path(path)\n    hash_path = data_path.with_suffix('.hash')\n\n    hash_value = hashlib.blake2b(data, key=key).hexdigest()     \u2776\n\n    with data_path.open(mode='x'), hash_path.open(mode='x'):    \u2777\n        data_path.write_bytes(data)                             \u2777\n        hash_path.write_text(hash_value)                        \u2777\n\ndef is_modified(path, key):\n    data_path = Path(path)\n    hash_path = data_path.with_suffix('.hash')\n\n    data = data_path.read_bytes()                               \u2778\n    original_hash_value = hash_path.read_text()                 \u2778\n\n    hash_value = hashlib.blake2b(data, key=key).hexdigest()     \u2779\n\n    return original_hash_value != hash_value                    \u277a\n```", "```py\n>>> import hashlib\n>>> import hmac\n>>> \n>>> hmac_sha256 = hmac.new(\n...     b'key', msg=b'message', digestmod=hashlib.sha256)\n```", "```py\n>>> hmac_sha256.digest()                                             \u2776\nb\"n\\x9e\\xf2\\x9bu\\xff\\xfc[z\\xba\\xe5'\\xd5\\x8f\\xda\\xdb/\\xe4.r\\x19\\x01\\x19v\\x91\nsC\\x06_X\\xedJ\"\n>>> hmac_sha256.hexdigest()                                          \u2777\n'6e9ef29b75fffc5b7abae527d58fdadb2fe42e7219011976917343065f58ed4a'\n>>> hmac_sha256.digest_size                                          \u2778\n32\n```", "```py\n>>> hmac_sha256.name\n'hmac-sha256'\n```", "```py\nimport hashlib\nimport hmac\nimport json\n\nhmac_sha256 = hmac.new(b'shared_key', digestmod=hashlib.sha256)   \u2776\nmessage = b'from Bob to Alice'                                    \u2776\nhmac_sha256.update(message)                                       \u2776\nhash_value = hmac_sha256.hexdigest()                              \u2776\n\nauthenticated_msg = {                                             \u2777\n   'message': list(message),                                      \u2777\n   'hash_value': hash_value, }                                    \u2777\noutbound_msg_to_alice = json.dumps(authenticated_msg)             \u2777\n```", "```py\nimport hashlib\nimport hmac\nimport json\n\nauthenticated_msg = json.loads(inbound_msg_from_bob)\nmessage = bytes(authenticated_msg['message'])\n\nhmac_sha256 = hmac.new(b'shared_key', digestmod=hashlib.sha256)    \u2776\nhmac_sha256.update(message)                                        \u2776\nhash_value = hmac_sha256.hexdigest()                               \u2776\n\nif hash_value == authenticated_msg['hash_value']:                  \u2777\n    print('trust message')\n    ...\n```", "```py\n>>> from hmac import compare_digest\n>>> \n>>> compare_digest('alice', 'mallory')    \u2776\nFalse                                     \u2776\n>>> compare_digest('alice', 'alice')      \u2777\nTrue                                      \u2777\n```"]