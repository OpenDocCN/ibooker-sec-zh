["```py\n$ sudo apt install pipenv    \u2776\n$ sudo dnf install pipenv    \u2777\n$ pkg install py36-pipenv    \u2778\n$ pip install --user pipenv  \u2779\n```", "```py\n$ pipenv install\n```", "```py\n$ pipenv shell\n```", "```py\n$ pipenv install cryptography\n```", "```py\n>>> from cryptography.fernet import Fernet     \u2776\n>>> \n>>> key = Fernet.generate_key()\n>>> fernet = Fernet(key)\n```", "```py\n>>> token = fernet.encrypt(b'plaintext')    \u2776\n```", "```py\n>>> fernet.decrypt(token)     \u2776\nb'plaintext'\n```", "```py\nfrom cryptography.fernet import Fernet, MultiFernet\n\nold_key = read_key_from_somewhere_safe()\nold_fernet = Fernet(old_key)\n\nnew_key = Fernet.generate_key()\nnew_fernet = Fernet(new_key)\n\nmulti_fernet = MultiFernet([new_fernet, old_fernet])        \u2776\nold_tokens = read_tokens_from_somewhere_safe()              \u2776\nnew_tokens = [multi_fernet.rotate(t) for t in old_tokens]   \u2776\n\nreplace_old_tokens(new_tokens)                              \u2777\nreplace_old_key_with_new_key(new_key)                       \u2777\ndel old_key                                                 \u2777\n\nfor new_token in new_tokens:                                \u2778\n    plaintext = new_fernet.decrypt(new_token)               \u2778\n```", "```py\n>>> from cryptography.hazmat.backends import default_backend\n>>> from cryptography.hazmat.primitives.ciphers import (\n...     Cipher, algorithms, modes)\n>>> \n>>> key = b'key must be 128, 196 or 256 bits'\n>>> \n>>> cipher = Cipher(\n...     algorithms.AES(key),                             \u2776\n...     modes.ECB(),                                     \u2776\n...     backend=default_backend())                       \u2777\n>>> encryptor = cipher.encryptor()\n>>> \n>>> plaintext = b'block size = 128'                      \u2778\n>>> encryptor.update(plaintext) + encryptor.finalize()\nb'G\\xf2\\xe2J]a;\\x0e\\xc5\\xd6\\x1057D\\xa9\\x88'              \u2779\n```", "```py\n>>> import secrets\n>>> from cryptography.hazmat.backends import default_backend\n>>> from cryptography.hazmat.primitives.ciphers import (\n...     Cipher, algorithms, modes)\n>>> \n>>> key = b'key must be 128, 196 or 256 bits'\n>>> \n>>> def encrypt(data):\n...     iv = secrets.token_bytes(16)      \u2776\n...     cipher = Cipher(\n...         algorithms.AES(key),          \u2777\n...         modes.CBC(iv),                \u2777\n...         backend=default_backend())\n...     encryptor = cipher.encryptor()\n...     return encryptor.update(data) + encryptor.finalize()\n... \n>>> plaintext = b'the same message' * 2   \u2778\n>>> x = encrypt(plaintext)                \u2779\n>>> y = encrypt(plaintext)                \u2779\n>>> \n>>> x[:16] == x[16:]                      \u277a\nFalse                                     \u277a\n>>> x == y                                \u277b\nFalse                                     \u277b\n```"]