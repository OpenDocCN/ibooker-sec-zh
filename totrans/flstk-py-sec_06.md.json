["```py\n$ openssl genpkey -algorithm RSA \\      \u2776\n    -out private_key.pem \\              \u2777\n    -pkeyopt rsa_keygen_bits:3072       \u2778\n```", "```py\n$ openssl rsa -pubout -in private_key.pem -out public_key.pem\n```", "```py\n$ chmod 600 private_key.pem   \u2776\n$ chmod 644 public_key.pem    \u2777\n```", "```py\n-----BEGIN PRIVATE KEY-----\nMIIG/QIBADANBgkqhkiG9w0BAQEFAASCBucwggbjAgEAAoIBgQDJ2Psz+Ub+VKg0\nvnlZmm671s5qiZigu8SsqcERPlSk4KsnnjwbibMhcRlGJgSo5Vv13SMekaj+oCTl\n...\n\n-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAydj7M/lG/lSoNL55WZpu\nu9bOaomYoLvErKnBET5UpOCrJ548G4mzIXEZRiYEqOVb9d0jHpGo/qAk5VCwfNPG\n...\n```", "```py\nfrom cryptography.hazmat.backends import default_backend    \u2776\nfrom cryptography.hazmat.primitives import serialization    \u2776\nfrom cryptography.hazmat.primitives.asymmetric import rsa   \u2776\n\nprivate_key = rsa.generate_private_key(                     \u2777\n    public_exponent=65537,                                  \u2777\n    key_size=3072,                                          \u2777\n    backend=default_backend(), )                            \u2777\n\npublic_key = private_key.public_key()                       \u2778\n```", "```py\nprivate_bytes = private_key.private_bytes(                    \u2776\n    encoding=serialization.Encoding.PEM,                      \u2776\n    format=serialization.PrivateFormat.PKCS8,                 \u2776\n    encryption_algorithm=serialization.NoEncryption(), )      \u2776\n\nwith open('private_key.pem', 'xb') as private_file:           \u2776\n    private_file.write(private_bytes)                         \u2776\n\npublic_bytes = public_key.public_bytes(                       \u2777\n    encoding=serialization.Encoding.PEM,                      \u2777\n    format=serialization.PublicFormat.SubjectPublicKeyInfo, ) \u2777\n\nwith open('public_key.pem', 'xb') as public_file:             \u2777\n    public_file.write(public_bytes)                           \u2777\n```", "```py\nwith open('private_key.pem', 'rb') as private_file:            \u2776\n   loaded_private_key = serialization.load_pem_private_key(    \u2776\n       private_file.read(),                                    \u2776\n       password=None,                                          \u2776\n       backend=default_backend()                               \u2776\n   )                                                           \u2776\n\nwith open('public_key.pem', 'rb') as public_file:              \u2777\n   loaded_public_key = serialization.load_pem_public_key(      \u2777\n       public_file.read(),                                     \u2777\n       backend=default_backend()                               \u2777\n   )                                                           \u2777\n```", "```py\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\n\npadding_config = padding.OAEP(                           \u2776\n   mgf=padding.MGF1(algorithm=hashes.SHA256()),          \u2776\n   algorithm=hashes.SHA256(),                            \u2776\n   label=None, )                                         \u2776\n\nplaintext = b'message from Alice to Bob'\n\nciphertext = loaded_public_key.encrypt(                  \u2777\n   plaintext=plaintext,                                  \u2777\n   padding=padding_config, )                             \u2777\n\ndecrypted_by_private_key = loaded_private_key.decrypt(   \u2778\n   ciphertext=ciphertext,                                \u2778\n   padding=padding_config)                               \u2778\n\nassert decrypted_by_private_key == plaintext\n```", "```py\nimport json\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import hashes\n\nmessage = b'from Bob to Alice'\n\npadding_config = padding.PSS(                     \u2776\n    mgf=padding.MGF1(hashes.SHA256()),            \u2776\n    salt_length=padding.PSS.MAX_LENGTH)           \u2776\n\nprivate_key = load_rsa_private_key()              \u2777\nsignature = private_key.sign(                     \u2778\n    message,                                      \u2778\n    padding_config,                               \u2778\n    hashes.SHA256())                              \u2778\n\nsigned_msg = {                                    \u2779\n    'message': list(message),                     \u2779\n    'signature': list(signature),                 \u2779\n}                                                 \u2779\noutbound_msg_to_alice = json.dumps(signed_msg)    \u2779\n```", "```py\nimport json\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.exceptions import InvalidSignature\n\ndef receive(inbound_msg_from_bob):\n    signed_msg = json.loads(inbound_msg_from_bob)    \u2776\n    message = bytes(signed_msg['message'])           \u2776\n    signature = bytes(signed_msg['signature'])       \u2776\n\n    padding_config = padding.PSS(                    \u2777\n        mgf=padding.MGF1(hashes.SHA256()),           \u2777\n        salt_length=padding.PSS.MAX_LENGTH)          \u2777\n\n    private_key = load_rsa_private_key()             \u2778\n    try:\n        private_key.public_key().verify(             \u2779\n            signature,                               \u2779\n            message,                                 \u2779\n            padding_config,                          \u2779\n            hashes.SHA256())                         \u2779\n        print('Trust message')\n    except InvalidSignature:\n        print('Do not trust message')\n```", "```py\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\n\nmessage = b'from Bob to Alice'\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n\nsignature = private_key.sign(message, ec.ECDSA(hashes.SHA256()))    \u2776\n```", "```py\nfrom cryptography.exceptions import InvalidSignature\n\npublic_key = private_key.public_key()   \u2776\n\ntry:\n    public_key.verify(signature, message, ec.ECDSA(hashes.SHA256()))\nexcept InvalidSignature:                \u2777\n    pass                                \u2777\n```", "```py\nimport hashlib\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec, utils\n\nlarge_msg = b'from Bob to Alice ...'              \u2776\nsha256 = hashlib.sha256()                         \u2776\nsha256.update(large_msg[:8])                      \u2776\nsha256.update(large_msg[8:])                      \u2776\nhash_value = sha256.digest()                      \u2776\n\nprivate_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n\nsignature = private_key.sign(                     \u2777\n    hash_value,                                   \u2777\n    ec.ECDSA(utils.Prehashed(hashes.SHA256())))   \u2777\n```"]