["```py\n$ pipenv install django-registration\n```", "```py\nINSTALLED_APPS = [\n    ...\n    'django.contrib.staticfiles',\n    'django_registration',         \u2776\n]\n```", "```py\n$ python manage.py migrate\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include                                \u2776\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n path('accounts/',          include('django_registration.backends.activation.urls')),   \u2777\n]\n```", "```py\nimport os                                                 \u2776\n\n...\n\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],    \u2777\n        ...\n    }\n]\n```", "```py\n<html>\n    <body>\n\n        <form method='POST'>\n          {% csrf_token %}           \u2776\n          {{ form.as_p }}            \u2777\n          <button type='submit'>Register</button>\n        </form>\n\n    </body>\n</html>\n```", "```py\n<html>\n    <body>\n        <p>\n            Registration is complete.\n            Check your email to activate your account.\n        </p>\n    </body>\n</html>\n```", "```py\nActivate your account at {{ site }}\n```", "```py\nHello {{ user.username }},\n\nGo to https://{{ site }}/accounts/activate/{{ activation_key }}/ \nto activate your account.\n```", "```py\n<html>\n    <body>\n        <p>Account activation completed!</p>\n    </body>\n</html>\n```", "```py\nif DEBUG:\n    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n```", "```py\nACCOUNT_ACTIVATION_DAYS = 3\n```", "```py\nurlpatterns = [\n   ...\n path('accounts/', include('django.contrib.auth.urls')),     \u2776\n]\n```", "```py\n$ python manage.py startapp profile_info\n```", "```py\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.views.generic import View\n\nclass ProfileView(View):\n\n    def get(self, request):\n        user = request.user                      \u2776\n        if not user.is_authenticated:            \u2777\n            return HttpResponse(status=401)      \u2777\n        return render(request, 'profile.html')   \u2778\n```", "```py\nfrom django.urls import path\nfrom profile_info import views\n\nurlpatterns = [\n   path('profile/', views.ProfileView.as_view(), name='profile'),\n]\n```", "```py\nurlpatterns = [\n   ...\n path('accounts/', include('profile_info.urls')),\n]\n```", "```py\n<html>\n    <body>\n\n        <form method='POST'>\n          {% csrf_token %}                      \u2776\n          {{ form.as_p }}                       \u2777\n          <button type='submit'>Login</button>\n        </form>\n\n    </body>\n</html>\n```", "```py\n<html>\n    <body>\n\n        <p>\n            Hello {{ user.username }},                \u2776\n            your email is {{ user.email }}.           \u2776\n        </p>\n        <p>\n            <a href=\"{% url 'logout' %}\">Logout</a>   \u2777\n        </p>\n\n    </body>\n</html>\n```", "```py\nLOGOUT_REDIRECT_URL = '/accounts/login/'\n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin    \u2776\nfrom django.http import HttpResponse                         \u2777\nfrom django.shortcuts import render\nfrom django.views.generic import View\n\nclass ProfileView(LoginRequiredMixin, View):                 \u2778\n\n    def get(self, request):\n        user = request.user                                  \u2779\n        if not user.is_authenticated:                        \u2779\n            return HttpResponse(status=401)                  \u2779\n        return render(request, 'profile.html')\n```", "```py\nfrom django.contrib.auth.decorators import login_required\n\n@login_required               \u2776\ndef profile_view(request):\n   ...\n   return render(request, 'profile.html')\n```", "```py\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\n\nclass TestAuthentication(TestCase):\n\n    def test_authenticated_workflow(self):\n        passphrase = 'wool reselect resurface annuity'                   \u2776\n        get_user_model().objects.create_user('bob', password=passphrase) \u2776\n\n        self.client.login(username='bob', password=passphrase)           \u2777\n        self.assertIn('sessionid', self.client.cookies)                  \u2777\n\n        response = self.client.get(                                      \u2778\n            '/accounts/profile/',                                        \u2778\n            secure=True)                                                 \u2779\n        self.assertEqual(200, response.status_code)                      \u277a\n        self.assertContains(response, 'bob')                             \u277a\n\n        self.client.logout()                                             \u277b\n        self.assertNotIn('sessionid', self.client.cookies)               \u277b\n```", "```py\nclass TestAuthentication(TestCase):\n\n...\n\n    def test_prohibit_anonymous_access(self):\n        response = self.client.get('/accounts/profile/', secure=True)   \u2776\n        self.assertEqual(302, response.status_code)                     \u2777\n        self.assertIn('/accounts/login/', response['Location'])         \u2777\n```", "```py\n$ python manage.py test\nSystem check identified no issues (0 silenced).\n..\n--------------------------------------------------------------------\nRan 2 tests in 0.294s\nOK\n```"]