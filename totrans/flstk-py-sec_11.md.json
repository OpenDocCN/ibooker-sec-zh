["```py\nAUTH_PASSWORD_VALIDATORS = [\n    {\n      'NAME': 'django.contrib.auth...UserAttributeSimilarityValidator',\n    },\n    {\n      'NAME': 'django.contrib.auth...MinimumLengthValidator',\n    },\n    {\n      'NAME': 'django.contrib.auth...CommonPasswordValidator',\n    },\n    {\n      'NAME': 'django.contrib.auth...NumericPasswordValidator',\n    },\n]\n```", "```py\n{\n   'NAME': 'django.contrib.auth...UserAttributeSimilarityValidator',\n   'OPTIONS': {\n       'user_attributes': ('custom', 'attribute', 'names'),\n       'max_similarity': 0.6,      \u2776\n   }\n}\n```", "```py\n{\n   'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n   'OPTIONS': {\n       'min_length': 12,     \u2776\n   }\n}\n```", "```py\n{\n   'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n   'OPTIONS': {\n       'password_list_path': '/path/to/more-common-passwords.txt.gz',\n   }\n}\n```", "```py\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n\nclass PassphraseValidator:\n\n    def __init__(self, dictionary_file='/usr/share/dict/words'):\n        self.min_words = 4\n        with open(dictionary_file) as f:                                 \u2776\n            self.words = set(word.strip() for word in f)                 \u2776\n\n    def get_help_text(self):\n        return _('Your password must contain %s words' % self.min_words) \u2777\n\n```", "```py\nclass PassphraseValidator:\n\n...\n\n    def validate(self, password, user=None):\n        tokens = password.split(' ')\n\n        if len(tokens) < self.min_words:                                   \u2776\n            too_short = _('This password needs %s words' % self.min_words) \u2776\n            raise ValidationError(too_short, code='too_short')             \u2776\n\n        if not all(token in self.words for token in tokens):               \u2777\n            not_passphrase = _('This password is not a passphrase')        \u2777\n            raise ValidationError(not_passphrase, code='not_passphrase')   \u2777\n```", "```py\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'profile_info.validators.PassphraseValidator',\n        'OPTIONS': {\n            'dictionary_file': '/path/to/dictionary.txt.gz',     \u2776\n        }\n    },\n]\n```", "```py\n>>> from hashlib import blake2b\n>>> import secrets\n>>> \n>>> message = b'same message'\n>>> \n>>> sodium = secrets.token_bytes(16)       \u2776\n>>> chloride = secrets.token_bytes(16)     \u2776\n>>> \n>>> x = blake2b(message, salt=sodium)      \u2777\n>>> y = blake2b(message, salt=chloride)    \u2777\n>>> \n>>> x.digest() == y.digest()               \u2778\nFalse                                      \u2778\n```", "```py\nimport hashlib\nimport secrets\nimport sys\nimport timeit\n\niterations = int(sys.argv[1])                                         \u2776\n\ndef test():\n    message = b'password'\n    salt = secrets.token_bytes(16)\n    hash_value = hashlib.pbkdf2_hmac('sha256',\n                                     message,\n                                     salt,\n                                     iterations)                      \u2777\n    print(hash_value.hex())\n\nif __name__ == '__main__':\n    seconds = timeit.timeit('test()', number=10, globals=globals())   \u2778\n    print('Seconds elapsed: %s' % seconds)\n```", "```py\n$ python pbkdf2.py 260000\n685a8d0d9a6278ac8bc5f854d657dde7765e0110f145a07d8c58c003815ae7af\nfd723c866b6bf1ce1b2b26b2240fae97366dd2e03a6ffc3587b7d041685edcdc\n5f9cd0766420329df6886441352f5b5f9ca30ed4497fded3ed6b667ce5c095d2\n175f2ed65029003a3d26e592df0c9ef0e9e1f60a37ad336b1c099f34d933366d\n1725595f4d288f0fed27885149e61ec1d74eb107ee3418a7c27d1f29dfe5b025\n0bf1335ce901bca7d15ab777ef393f705f33e14f4bfa8213ca4da4041ad1e8b1\nc25a06da375adec19ea08c8fe394355dced2eb172c89bd6b4ce3fecf0749aff9\na308ecca199b25f00b9c3348ad477c93735fbe3754148955e4cafc8853a4e879\n3e8be1f54f07b41f82c92fbdd2f9a68d5cf5f6ee12727ecf491c59d1e723bb34\n135fa69ae5c5a5832ad1fda34ff8fcd7408b6b274de621361148a6e80671d240\nSeconds elapsed: 2.962819952\n```", "```py\n$ python pbkdf2.py 2600000\n00f095ff2df1cf4d546c79a1b490616b589a8b5f8361c9c8faee94f11703bd51\n37b401970f4cab9f954841a571e4d9d087390f4d731314b666ca0bc4b7af88c2\n99132b50107e37478c67e4baa29db155d613619b242208fed81f6dde4d15c4e7\n65dc4bba85811e59f00a405ba293958d1a55df12dd2bb6235b821edf95ff5ace\n7d9d1fd8b21080d5d2870241026d34420657c4ac85af274982c650beaecddb7b\n2842560f0eb8e4905c73656171fbdb3141775705f359af72b1c9bfce38569aba\n246906cab4b52bcb41eb1fd583347575cee76b91450703431fe48478be52ff82\ne6cd24aa5efdf0f417d352355eefb5b56333389e8890a43e287393445acf640e\nd5f463c5e116a3209c92253a8adde121e49a57281b64f449cf0e89fc4c9af133\n0a52b3fca5a77f6cb601ff9e82b88aac210ffdc0f2ed6ec40b09cedab79287d8\nSeconds elapsed: 28.934859217\n```", "```py\nPASSWORD_HASHERS = [\n   'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n   'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n   'django.contrib.auth.hashers.Argon2PasswordHasher',\n   'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n]\n```", "```py\nfrom django.contrib.auth.hashers import PBKDF2PasswordHasher\n\nclass TwoFoldPBKDF2PasswordHasher(PBKDF2PasswordHasher):\n\n    iterations = PBKDF2PasswordHasher.iterations * 2      \u2776\n```", "```py\nPASSWORD_HASHERS = [\n    'profile_info.hashers.TwoFoldPBKDF2PasswordHasher',\n]\n```", "```py\n$ pipenv install django[argon2]\n```", "```py\nPASSWORD_HASHERS = [\n   'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',\n]\n```", "```py\nPASSWORD_HASHERS = [\n 'django.contrib.auth.hashers.Argon2PasswordHasher',       \u2776\n   'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',\n]\n```", "```py\nfrom django.contrib.auth.hashers import (\n    Argon2PasswordHasher,\n    UnsaltedMD5PasswordHasher,\n)\n\nclass UnsaltedMD5ToArgon2PasswordHasher(Argon2PasswordHasher):\n\n    algorithm = '%s->%s' % (UnsaltedMD5PasswordHasher.algorithm,\n                            Argon2PasswordHasher.algorithm)\n\n    def encode(self, password, salt):                  \u2776\n        md5_hash = self.get_md5_hash(password)         \u2777\n        return self.encode_md5_hash(md5_hash, salt)    \u2777\n\n    def verify(self, password, encoded):               \u2778\n        md5_hash = self.get_md5_hash(password)         \u2779\n        return super().verify(md5_hash, encoded)       \u2779\n\n    def encode_md5_hash(self, md5_hash, salt):\n        return super().encode(md5_hash, salt)\n\n    def get_md5_hash(self, password):\n        hasher = UnsaltedMD5PasswordHasher()\n        return hasher.encode(password, hasher.salt())\n```", "```py\nPASSWORD_HASHERS = [\n   'django.contrib.auth.hashers.Argon2PasswordHasher',\n 'django_app.hashers.UnsaltedMD5ToArgon2PasswordHasher',\n   'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',\n]\n```", "```py\nfrom django.db import migrations\nfrom django.db.models.functions import Length\nfrom django_app.hashers import UnsaltedMD5ToArgon2PasswordHasher\n\ndef forwards_func(apps, schema_editor):\n   User = apps.get_model('auth', 'User')                         \u2776\n   unmigrated_users = User.objects.annotate(                     \u2777\n       text_len=Length('password')).filter(text_len=32)          \u2777\n\n   hasher = UnsaltedMD5ToArgon2PasswordHasher()\n   for user in unmigrated_users:\n       md5_hash = user.password\n       salt = hasher.salt()\n       user.password = hasher.encode_md5_hash(md5_hash, salt)    \u2778\n       user.save(update_fields=['password'])                     \u2779\n\nclass Migration(migrations.Migration):\n\n   dependencies = [\n       ('auth', '0011_update_proxy_permissions'),                \u277a\n   ]\n\n   operations = [\n       migrations.RunPython(forwards_func),\n   ]\n```", "```py\nPASSWORD_HASHERS = [\n   'django.contrib.auth.hashers.Argon2PasswordHasher',\n   'django_app.hashers.UnsaltedMD5ToArgon2PasswordHasher',\n   'django.contrib.auth.hashers.UnsaltedMD5PasswordHasher',\n]\n```"]