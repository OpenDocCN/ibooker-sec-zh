["```py\n$ python manage.py startapp messaging\n```", "```py\nINSTALLED_APPS = [\n    ...\n 'messaging',\n]\n```", "```py\nfrom django.db.models import Model, CharField\n\nclass AuthenticatedMessage(Model):\n    message = CharField(max_length=100)\n    hash_value = CharField(max_length=64)\n```", "```py\n$ python manage.py makemigrations messaging\nMigrations for 'messaging':\n messaging/migrations/0001_initial.py      \u2776\n    - Create model AuthenticatedMessage\n```", "```py\n$ python manage.py migrate\nRunning migrations:\n  Applying messaging.0001_initial... OK\n```", "```py\n$ python manage.py shell\n>>> from django.contrib.auth.models import Permission\n>>> \n>>> permissions = Permission.objects.filter(\n...     content_type__app_label='messaging',\n...     content_type__model='authenticatedmessage')\n>>> [p.codename for p in permissions]\n['add_authenticatedmessage', 'change_authenticatedmessage', \n'delete_authenticatedmessage', 'view_authenticatedmessage']\n```", "```py\nclass AuthenticatedMessage(Model):       \u2776\n    message = CharField(max_length=100)\n    mac = CharField(max_length=64)\n\n class Meta:                          \u2777\n permissions = [\n ('send_authenticatedmessage', 'Can send msgs'),\n ('receive_authenticatedmessage', 'Can receive msgs'),\n ]\n```", "```py\n$ python manage.py makemigrations messaging --name=add_permissions\nMigrations for 'messaging':\n messaging/migrations/0002_add_permissions.py      \u2776\n    - Change Meta options on authenticatedmessage\n```", "```py\n$ python manage.py migrate\nRunning migrations:\n  Applying messaging.0002_add_permissions... OK\n```", "```py\n$ pipenv install whitenoise\n```", "```py\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',   \u2776\n    'whitenoise.middleware.WhiteNoiseMiddleware',      \u2777\n    ...\n]\n```", "```py\n$ python manage.py createsuperuser \\\n         --username=alice --email=alice@alice.com\n```", "```py\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.models import Group, Permission\n\nbob = User.objects.get(username='bob')                                  \u2776\nobservers = Group.objects.get(name='observers')                         \u2776\ncan_send = Permission.objects.get(codename='send_authenticatedmessage') \u2776\n\nbob.groups.add(observers)                                               \u2777\nbob.user_permissions.add(can_send)                                      \u2778\n\nbob.groups.remove(observers)                                            \u2779\nbob.user_permissions.remove(can_send)                                   \u277a\n```", "```py\n>>> from django.contrib.auth.models import User\n>>> bob = User.objects.get(username='bob')\n>>> bob.has_perm('auth.add_user')                            \u2776\nFalse                                                        \u2776\n>>> bob.has_perm('messaging.receive_authenticatedmessage')   \u2777\nTrue                                                         \u2777\n```", "```py\n>>> alice = User.objects.get(username='alice')\n>>> alice.is_superuser                         \u2776\nTrue                                           \u2776\n>>> alice.has_perm('auth.add_user')\nTrue\n```", "```py\n>>> bob.has_perms(['auth.add_user',                              \u2776\n...                'messaging.receive_authenticatedmessage'])    \u2776\nFalse                                                            \u2776\n>>> \n>>> bob.has_perms(['messaging.send_authenticatedmessage',        \u2777\n...                'messaging.receive_authenticatedmessage'])    \u2777\nTrue                                                             \u2777\n```", "```py\n>>> bob.has_perm('banana')\nFalse\n```", "```py\n>>> perm = 'messaging.send_authenticatedmessage'    \u2776\n>>> bob.has_perm(perm)                              \u2776\nTrue                                                \u2776\n>>> \n>>> can_send = Permission.objects.get(              \u2777\n...     codename='send_authenticatedmessage')       \u2777\n>>> bob.user_permissions.remove(can_send)           \u2777\n>>> \n>>> bob.has_perm(perm)                              \u2778\nTrue                                                \u2778\n```", "```py\n>>> bob.refresh_from_db()                     \u2776\n>>> bob.has_perm(perm)                        \u2776\nTrue                                          \u2776\n>>> \n>>> reloaded = User.objects.get(id=bob.id)    \u2777\n>>> reloaded.has_perm(perm)                   \u2777\nFalse                                         \u2777\n```", "```py\nfrom django.shortcuts import render\nfrom django.views import View\n\nclass UserView(View):\n\n    def get(self, request):\n        assert request.user.has_perm('auth.view_user')   \u2776\n        ...\n        return render(request, 'sensitive_info.html')    \u2777\n```", "```py\n$ python -c 'assert 1 == 2'               \u2776\nTraceback (most recent call last):        \u2776\n  File \"<string>\", line 1, in <module>    \u2776\nAssertionError                            \u2776\n$ python -Oc 'assert 1 == 2'              \u2777\n```", "```py\nfrom django.contrib.auth.mixins import PermissionRequiredMixin\nfrom django.http import JsonResponse\n\nclass AuthenticatedMessageView(PermissionRequiredMixin, View):     \u2776\n permission_required = 'messaging.view_authenticatedmessage'    \u2777\n\n    def get(self, request):\n         ...\n         return JsonResponse(data)\n```", "```py\nfrom django.contrib.auth.decorators import permission_required\nfrom django.http import JsonResponse\n\n@permission_required('messaging.view_authenticatedmessage', raise_exception=True)                      \u2776\ndef authenticated_message_view(request):        \u2777\n    ...                                         \u2777\n    return JsonResponse(data)                   \u2777\n```", "```py\nfrom django.contrib.auth.mixins import UserPassesTestMixin\nfrom django.http import JsonResponse\n\nclass UserPassesTestView(UserPassesTestMixin, View):\n\n    def test_func(self):                                                \u2776\n        user = self.request.user                                        \u2776\n        return user.date_joined.year > 2020 or user.username == 'alice' \u2776\n\n    def get(self, request):\n        ...\n        return JsonResponse(data)\n```", "```py\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.http import JsonResponse\n\ndef test_func(user):                                                     \u2776\n    return user.email.endswith('@alice.com') or user.first_name == 'bob' \u2776\n\n@user_passes_test(test_func)\ndef user_passes_test_view(request):                                      \u2777\n    ...                                                                  \u2777\n    return JsonResponse(data)                                            \u2777\n```", "```py\n{% if perms.messaging.send_authenticatedmessage %}\n    <a href='/authenticated_message_form/'>Send Message</a>\n{% endif %}\n```", "```py\n<input type='submit'\n       {% if not perms.auth.add_user %} disabled {% endif %}\n       value='Add User'/>\n```", "```py\nfrom django.contrib.auth.models import User, Permission\n\nclass TestAuthorization(TestCase):\n\n    def setUp(self):\n        passphrase = 'fraying unwary division crevice'     \u2776\n        self.charlie = User.objects.create_user(           \u2776\n            'charlie', password=passphrase)                \u2776\n        self.client.login(\n            username=self.charlie.username, password=passphrase)\n\n    def test_authorize_by_permission(self):\n        url = '/messaging/authenticated_message/'\n        response = self.client.get(url, secure=True)       \u2777\n self.assertEqual(403, response.status_code)        \u2777\n\n        permission = Permission.objects.get(               \u2778\n            codename='view_authenticatedmessage')          \u2778\n        self.charlie.user_permissions.add(permission)      \u2778\n\n        response = self.client.get(url, secure=True)       \u2779\n self.assertEqual(200, response.status_code)        \u2779\n```"]