["```py\n...\n\"requests\": {\n \"hashes\": [\n \"Sha256:b3559a131db72c33ee969480840fff4bb6dd1117c8...\", \u2776\n \"Sha256:fe75cc94a9443b9246fc7049224f756046acb93f87...\" \u2776\n ],\n    \"version\": \"==2.24.0\"                                          \u2777\n},\n...\n```", "```py\n$ pipenv install\nInstalling dependencies from Pipfile.lock\nAn error occurred while installing requests==2.24.0 \n\u27a5 --hash=sha256:b3559a131db72c33ee969480840fff4bb6dd1117c8...   \u2776\n\u27a5 --hash=sha256:fe75cc94a9443b9246fc7049224f756046acb93f87...   \u2776\n...\n[pipenv.exceptions.InstallError]: ['ERROR: THESE PACKAGES DO NOT\n\u27a5 MATCH THE HASHES FROM THE REQUIREMENTS FILE. If you have updated\n\u27a5 the package versions, please update the hashes. Otherwise,\n\u27a5 examine the package contents carefully; someone may have      \u2777\n\u27a5 tampered with them.                                           \u2777\n...\n```", "```py\n$ pipenv install pyyaml\n```", "```py\n>>> import yaml\n>>> \n>>> document = \"\"\"                             \u2776\n...   title: Full Stack Python Security        \u2776\n...   characters:                              \u2776\n...     - Alice                                \u2776\n...     - Bob                                  \u2776\n...     - Charlie                              \u2776\n...     - Eve                                  \u2776\n...     - Mallory                              \u2776\n... \"\"\"                                        \u2776\n>>> \n>>> book = yaml.load(document, Loader=yaml.BaseLoader)\n>>> book['title']                              \u2777\n'Full Stack Python Security'                   \u2777\n>>> book['characters']                         \u2777\n['Alice', 'Bob', 'Charlie', 'Eve', 'Mallory']  \u2777\n```", "```py\n$ python                                           \u2776\n>>> import yaml\n>>> \n>>> input = '!!python/object/new:sys.exit [42]'    \u2777\n>>> yaml.load(input, Loader=yaml.UnsafeLoader)     \u2778\n$ echo $?                                          \u2779\n42                                                 \u2779\n```", "```py\n>>> from xml.etree.ElementTree import fromstring\n>>> \n>>> xml = \"\"\"                 \u2776\n... <!DOCTYPE example [\n...   <!ENTITY a \"Alice\">     \u2777\n... ]>\n... <root>&a;&a;</root>       \u2778\n... \"\"\"\n>>> \n>>> example = fromstring(xml)\n>>> example.text              \u2779\n'AliceAlice'                  \u2779\n```", "```py\n<!DOCTYPE bomb [\n  <!ENTITY e \"a loooooooooooooooooooooooooong entity ...\">   \u2776\n]>\n<bomb>&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;</bomb>                  \u2777\n```", "```py\n<!DOCTYPE bomb [\n  <!ENTITY a \"lol\">                               \u2776\n  <!ENTITY b \"&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;\">    \u2776\n  <!ENTITY c \"&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;\">    \u2776\n  <!ENTITY d \"&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;\">    \u2776\n]>\n<bomb>&d;</bomb>\n```", "```py\n$ pipenv install defusedxml\n```", "```py\nfrom xml.etree.ElementTree import parse\n\nparse('/path/to/billion_laughs.xml')    \u2776\n```", "```py\nfrom xml.etree.ElementTree import parse\nfrom defusedxml.ElementTree import parse\n\nparse('/path/to/billion_laughs.xml')    \u2776\n```", "```py\nbad_practice = request.META['HTTP_HOST']    \u2776\n```", "```py\ngood_practice = request.get_host()    \u2776\n```", "```py\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.x509.oid import NameOID\n\nwith open(CERTIFICATE_PATH, 'rb') as f:                            \u2776\n    cert = default_backend().load_pem_x509_certificate(f.read())   \u2776\natts = cert.subject.get_attributes_for_oid(NameOID.COMMON_NAME)    \u2776\n\nALLOWED_HOSTS = [a.value for a in atts]                            \u2777\n```", "```py\nfrom django.views import View\nfrom django.shortcuts import redirect\n\nclass OpenRedirectView(View):\n    def get(self, request):\n        ...\n        next = request.GET.get('next')    \u2776\n        return redirect(next)             \u2777\n```", "```py\nfrom django.http import HttpResponseBadRequest\nfrom django.utils.http import url_has_allowed_host_and_scheme\n\nclass ValidatedRedirectView(View):\n    def get(self, request):\n        ...\n        next = request.GET.get('next')                                     \u2776\n        host = request.get_host()                                          \u2777\n        if url_has_allowed_host_and_scheme(next, host, require_https=True):\u2778\n            return redirect(next)\n\n        return HttpResponseBadRequest()                                    \u2779\n```", "```py\nhttps:/./alice.com/open_redirect/?next=http:/./alice.com/resource/\n```", "```py\nfrom django.contrib.auth.models import User\n\nsql = 'SELECT id, username FROM auth_user'      \u2776\nusers_with_username = User.objects.raw(sql)\n```", "```py\nsql = \"SELECT * FROM auth_user WHERE first_name = '%s' \" % first_name\nusers = User.objects.raw(sql)\n```", "```py\nsql = \"SELECT * FROM auth_user WHERE first_name = %s\"\nusers = User.objects.raw(sql, [first_name])\n```", "```py\nfrom django.db import connection\n\nsql = \"\"\"DELETE FROM messaging_authenticatedmessage    \u2776\n         WHERE id = %s \"\"\" % msg_id                    \u2776\nwith connection.cursor() as cursor:                    \u2777\n    cursor.execute(sql)                                \u2777\n```", "```py\nsql = \"\"\"DELETE FROM messaging_authenticatedmessage\n         WHERE id = %s \"\"\"                 \u2776\nwith connection.cursor() as cursor:\n    cursor.execute(sql, params=[msg_id])   \u2777\n```"]