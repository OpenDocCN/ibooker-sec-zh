["```py\nimport \"crypto/tls\"\n\nfunc main() {\n    destination := \"google.com:443\"                           \u2776\n     TLSconfig := &tls.Config{}                               \u2777\n     conn, err := tls.Dial(\"tcp\", destination, TLSconfig)\n    if err != nil {\n        panic(\"failed to connect: \" + err.Error())\n    }\n    conn.Close()\n}\n```", "```py\nimport (\n    \"crypto/tls\"\n    \"net/http\"\n)\n\nfunc hello(rw http.ResponseWriter, req *http.Request) {\n    rw.Write([]byte(\"Hello, world\\n\"))\n}\n\nfunc main() {\n    config := &tls.Config{                                 \u2776\n         MinVersion: tls.VersionTLS13,                     \u2776\n     }                                                     \u2776\n\n    http.HandleFunc(\"/\", hello)                            \u2777\n\n    server := &http.Server{                                \u2778\n         Addr:      \":8080\",                               \u2778\n         TLSConfig: config,                                \u2778\n     }\n\n    cert := \"cert.pem\"\n    key := \"key.pem\"\n    err := server.ListenAndServeTLS(cert, key)             \u2779\n     if err != nil {\n        panic(err)\n    }\n}\n```", "```py\nCertificate  ::=  SEQUENCE  {\n    tbsCertificate       TBSCertificate,\n    signatureAlgorithm   AlgorithmIdentifier,\n    signatureValue       BIT STRING  }\n```", "```py\n-----BEGIN CERTIFICATE-----\nMIIJQzCCCCugAwIBAgIQC1QW6WUXJ9ICAAAAAEbPdjANBgkqhkiG9w0BAQsFADBC\nMQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMRMw\nEQYDVQQDEwpHVFMgQ0EgMU8xMB4XDTE5MTAwMzE3MDk0NVoXDTE5MTIyNjE3MDk0\nNVowZjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcT\n[...]\nvaoUqelfNJJvQjJbMQbSQEp9y8EIi4BnWGZjU6Q+q/3VZ7ybR3cOzhnaLGmqiwFv\n4PNBdnVVfVbQ9CxRiplKVzZSnUvypgBLryYnl6kquh1AJS5gnJhzogrz98IiXCQZ\nc7mkvTKgCNIR9fedIus+LPHCSD7zUQTgRoOmcB+kwY7jrFqKn6thTjwPnfB5aVNK\ndl0nq4fcF8PN+ppgNFbwC2JxX08L1wEFk2LvDOQgKqHR1TRJ0U3A2gkuMtf6Q6au\n3KBzGW6l/vt3coyyDkQKDmT61tjwy5k=\n-----END CERTIFICATE-----\n```", "```py\n$ openssl x509 -in google.pem -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            0b:54:16:e9:65:17:27:d2:02:00:00:00:00:46:cf:76\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = Google Trust Services, CN = GTS CA 1O1\n        Validity\n            Not Before: Oct  3 17:09:45 2019 GMT\n            Not After : Dec 26 17:09:45 2019 GMT\n        Subject: C = US, ST = California, L = Mountain View, O = Google LLC,\nCN = *.google.com\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:74:25:79:7d:6f:77:e4:7e:af:fb:1a:eb:4d:41:\n                    b5:27:10:4a:9e:b8:a2:8c:83:ee:d2:0f:12:7f:d1:\n                    77:a7:0f:79:fe:4b:cb:b7:ed:c6:94:4a:b2:6d:40:\n                    5c:31:68:18:b6:df:ba:35:e7:f3:7e:af:39:2d:5b:\n                    43:2d:48:0a:54\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n[...]\n```", "```py\nNN:\n  -> e\n  <- e, ee\n```"]