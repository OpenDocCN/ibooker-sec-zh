- en: 3 Preliminary concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 初步概念
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖
- en: Bits and bytes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位和字节
- en: Functions and Boolean operators
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和布尔运算符
- en: Prime numbers and modular arithmetic
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 素数和模算术
- en: Before we get into the meat of the subject, let’s look at some preliminary concepts.
    I go through these topics fairly quickly because nowadays many of these ideas
    are taught in schools, even in the lower grades. More of these basic ideas are
    given later in the book, as needed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入主题之前，让我们先看一些初步概念。我会快速地介绍这些主题，因为如今许多这些想法甚至在低年级就开始教授。更多这些基本概念将在书中后面根据需要给出。
- en: 3.1 Bits and bytes
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 位和字节
- en: Data is stored in computers in the form of *bits*, which is shorthand for *binary
    digits*. A bit is just a number that can have the value either 0 or 1\. A bit
    can be stored in a computer in several ways. A switch can be either open or closed.
    A magnet can be oriented with its north pole either up or down. Light can be polarized
    either clockwise or counterclockwise. An electrical pulse can have either a small
    amplitude or a large amplitude.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以*位*的形式存储在计算机中，这是*二进制数字*的简称。一个位只是一个可以取值为0或1的数字。一个位可以以几种方式存储在计算机中。开关可以是打开或关闭的。磁铁的北极可以朝上或朝下。光可以是顺时针或逆时针极化的。电脉冲可以具有小幅度或大幅度。
- en: 'These binary digits can be used to form binary numbers. Here are the 3-bit
    binary numbers and their decimal equivalents. These 3-bit numbers are called *octal*
    numbers, meaning that they are numbers in the base 8:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些二进制数字可以用来形成二进制数。以下是3位二进制数及其十进制等价物。这些3位数被称为*八进制*数，意味着它们是基数为8的数：
- en: '![3-unnumb-1](../Images/3-unnumb-1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-1](../Images/3-unnumb-1.png)'
- en: Bits are also used to represent *logic values* or *truth values* in computer
    logic. 0 represents the logic value *false*, and 1 represents the logic value
    *true*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 位也用于表示计算机逻辑中的*逻辑值*或*真值*。0表示逻辑值*假*，1表示逻辑值*真*。
- en: 'A character, such as a letter or a digit, can be represented by an 8-bit binary
    number, which is called a *byte*. The term *byte* was coined in 1954 by Werner
    Buchholz of IBM. Since each bit has 2 possible values, 8 bits can represent 2⁸
    different characters: that is, 2 to the eighth power, which is 256\. This is enough
    for the 26 lowercase letters, 26 uppercase letters, 10 decimal digits, 33 punctuation
    marks such as = and $ plus some control characters such as tab and line feed.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符，比如字母或数字，可以用一个8位二进制数表示，这被称为*字节*。术语*字节*是由IBM的Werner Buchholz在1954年创造的。由于每个位有2个可能的值，8位可以表示2⁸个不同的字符：也就是2的8次方，即256。这足以表示26个小写字母、26个大写字母、10个十进制数字、33个标点符号，如=和$，再加上一些控制字符，如制表符和换行符。
- en: There are several schemes that allow for representing additional characters,
    such as Cyrillic Ж, Arabic س, and even Chinese 是, by using up to 4 bytes for each
    logogram. None of this is relevant for us. Ciphers can work on strings of characters
    without regard for their meaning. It is irrelevant that the byte being enciphered
    might be the third of 4 bytes representing some Chinese logogram.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方案可以表示额外的字符，比如西里尔字母Ж，阿拉伯字母س，甚至中文是，每个表意符号最多使用4个字节。这对我们来说并不相关。密码可以处理字符串而不考虑它们的含义。被加密的字节可能是表示某个中文表意符号的4个字节中的第三个是无关紧要的。
- en: 'For our purposes a byte has 3 identities: (1) it is a string of 8 logical true/false
    values; (2) it is an 8-bit binary number, and hence an integer between 0 and 255,
    inclusive, and (3) it is a representation of some character, such as a letter,
    digit, punctuation mark, or part of a logogram.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，一个字节有3个身份：（1）它是一个包含8个逻辑真/假值的字符串；（2）它是一个8位二进制数，因此是一个介于0和255之间的整数，包括0和255；（3）它是某个字符的表示，比如字母、数字、标点符号或表意符号的一部分。
- en: 3.2 Functions and operators
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 函数和运算符
- en: Mathematical functions are now taught in the elementary grades in school, so
    I am sure I do not need to explain the concept, but it is helpful to establish
    some notation and terminology. A function takes one or more values and produces
    another value as the result. The values that are taken are called the *inputs*
    or the *arguments* of the function, and the value that is returned is called the
    *output* or *result*. We say that you *apply* the function to the arguments to
    produce the result.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数学函数现在在小学阶段就开始教授，所以我相信我不需要解释这个概念，但建立一些符号和术语是有帮助的。一个函数接受一个或多个值，并产生另一个值作为结果。被接受的值称为函数的*输入*或*参数*，返回的值称为*输出*或*结果*。我们说你*应用*函数到参数上以产生结果。
- en: A function may be denoted by a symbol such as + or by a letter. When a symbol
    is used, it is called an *operator*, so + and × are operators, and the arguments
    are called the *operands*. When the function has one argument the symbol may be
    placed in front of the argument, like -5 or √9, or after the argument, like 5!
    (5 factorial, which is 1×2×3×4×5 = 120). If there are two arguments, the symbol
    is placed between them, like 3+4 or 6×7\. When the symbol is a letter, the arguments
    are enclosed in parentheses, like f(x). The function is denoted by f, and the
    argument is denoted by x. If there are multiple arguments they are separated by
    commas, like f(a,b,c). Some books on computer languages distinguish between arguments
    and parameters, but that is not important here.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数可以用符号表示，例如+或字母。当使用符号时，它被称为*运算符*，因此+和×是运算符，参数被称为*操作数*。当函数有一个参数时，符号可以放在参数前面，如-5或√9，或者在参数后面，如5！（5的阶乘，即1×2×3×4×5
    = 120）。如果有两个参数，符号就放在它们之间，如3+4或6×7。当符号是一个字母时，参数被括在括号中，如f(x)。函数由f表示，参数由x表示。如果有多个参数，则用逗号分隔，如f(a，b，c)。一些关于计算机语言的书籍区分参数和参数，但这在这里并不重要。
- en: 3.3 Boolean operators
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 布尔运算符
- en: Just as addition, subtraction, multiplication, and similar functions, operate
    on numbers, there are several functions that operate on bits when they represent
    truth values. These functions are called *logical operators*, or *Boolean operators*
    in honor of English mathematician George Boole.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如加法、减法、乘法等函数对数字进行操作一样，当位表示真值时，有几个函数对位进行操作。这些函数被称为*逻辑运算符*，或者为了英国数学家乔治·布尔而称之为*布尔运算符*。
- en: 'If A and B are truth values, then the logical functions **not**, **and**, **or**
    and **xor** are defined as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A和B是真值，则逻辑函数**not**，**and**，**or**和**xor**定义如下：
- en: '**not** A is true if A is false, and false if A is true.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**not** A如果A为假，则为真，如果A为真，则为假。'
- en: A **and** B is true if A and B are both true, and otherwise it is false.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A和B都为真，则A **and** B为真，否则为假。
- en: A **or** B is true if either A or B or both are true, and otherwise it is false.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A或B或两者都为真，则A **or** B为真，否则为假。
- en: A **xor** B is true if exactly one of A or B is true, and otherwise it is false.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A或B中只有一个为真，则A **xor** B为真，否则为假。
- en: In other words, A **xor** B is true either if A is true and B is false, or if
    B is true and A is false. **xor** is called the *exclusive-OR* operator. It is
    commonly denoted by the symbol ⊕, a circle with a + inside. The **and** and **or**
    operators are often represented by the symbols ∧ and ∨. It is easy to remember
    which is which because the symbol ∧ for **and** looks like a capital A without
    the crossbar.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果A为真且B为假，或者如果B为真且A为假，则A **xor** B为真。**xor**被称为*异或*运算符。它通常用符号⊕表示，里面有一个带加号的圆圈。**and**和**or**运算符通常用符号∧和∨表示。很容易记住哪个是哪个，因为**and**的符号∧看起来像一个没有横杠的大写A。
- en: 'Here are the values of the four Boolean functions in table form:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是四个布尔函数的值的表格形式：
- en: '![3-unnumb-2](../Images/3-unnumb-2.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-2](../Images/3-unnumb-2.png)'
- en: These four operators can be extended from single bits to strings of bits by
    operating on the corresponding pairs of bits. If A is 0011, a string of four bits
    representing the logic values false,false,true,true, and if B is 0101 representing
    the logic values false,true,false,true, then applying the four Boolean operators
    gives
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个运算符可以通过对应的位对操作来将单个位扩展为位字符串。如果A是0011，表示逻辑值为false,false,true,true，如果B是0101，表示逻辑值为false,true,false,true，则应用四个布尔运算符得到
- en: '![3-unnumb-3](../Images/3-unnumb-3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-3](../Images/3-unnumb-3.png)'
- en: 'The exclusive-OR operator is used extensively in cryptography. For example,
    a simple implementation of a one-time pad (see chapter 14) is to exclusive-OR
    the bytes of the message with bytes of a key stream, like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 异或运算符在密码学中被广泛使用。例如，一次性密码本的简单实现（见第14章）是将消息的字节与密钥流的字节进行异或运算，如下所示：
- en: '![3-unnumb-4](../Images/3-unnumb-4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-4](../Images/3-unnumb-4.png)'
- en: 3.4 Number bases
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4 数字进位制
- en: In ordinary arithmetic, numbers are represented in decimal notation. This notation
    was invented by the Hindus and the Arabs some time between the 5th and 7th centuries.
    Thus decimal digits are also called *Arabic numerals*. The system was introduced
    in Europe by Leonardo of Pisa (Leonardo Pisano), popularly known in his time as
    Fibonacci.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通算术中，数字用十进制表示。这种表示法是印度人和阿拉伯人在5至7世纪之间发明的。因此十进制数字也称为*阿拉伯数字*。这个系统由比萨的列奥纳多（列奥纳多·皮萨诺）引入欧洲，他在他那个时代被称为斐波那契。
- en: Historical tidbit
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 历史趣闻
- en: In Leonardo's time, roughly 1175-1250, sliding block puzzles were all the rage.
    (Some people believe this puzzle was the same as the Fifteen Puzzle supposedly
    invented by Noyes Chapman in 1874.) Public competitions with cash prizes were
    commonplace. Leonardo was a wizard at this puzzle. He won every time. His competitors
    gave him the jesting name “Fibonacci,” meaning “bonehead,” and Leonardo embraced
    it. Fibonacci became famous throughout Italy. When Fibonacci wrote his *Liber
    Abaci* (Book of Calculations) in 1202, he wanted people to know that its author
    was the famous Fibonacci. It would be boastful and undignified to say so directly,
    so on the title page he put *Filius Bonacci*, which could mean “Lucky Son” or
    “Son of Bonacci.”
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在莱昂纳多的时代，大约1175-1250年，滑动块拼图是风靡一时的。 （有些人认为这个谜题与据说是由诺伊斯·查普曼（Noyes Chapman）于1874年发明的十五拼图相同。）公开竞赛并奖金丰厚。莱昂纳多在这个谜题上是一个天才。他每次都赢。他的竞争对手给了他一个嘲笑的名字“斐波那契”，意思是“笨蛋”，莱昂纳多接受了这个名字。斐波那契在整个意大利都出名了。当斐波那契在1202年写了他的*《计算之书》（Liber
    Abaci）*时，他想让人们知道其作者是著名的斐波那契。直接说出这样的话会显得自夸和不体面，所以在封面上他写着*Filius Bonacci*，这可以理解为“幸运之子”或“Bonacci之子”。
- en: Later authors did not grasp this intent, and rejected the thought that the great
    Leonardo Pisano should be called “bonehead.” They surmised that Leonardo's family
    name might have been Bonacci. For the same reason, to remind his readers that
    he was the famous Fibonacci, in his private writings Leonardo sometimes slyly
    referred to himself as Leonardo Bonacci (Lucky Leonardo).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 后来的作者没有理解这个意图，并拒绝认为伟大的莱昂纳多·皮萨诺应该被称为“笨蛋”。他们猜测莱昂纳多的姓可能是Bonacci。出于同样的原因，为了提醒他的读者他是著名的斐波那契，莱昂纳多在他的私人文集中有时会狡猾地称自己为莱昂纳多·博纳奇（Lucky
    Leonardo）。
- en: Over time people forgot the name and reputation of Fibonacci the puzzle genius,
    until 1836 when bibliophile, and notorious book thief, Guglielmo Libri put the
    pieces together and grasped that *Filius* + *Bonacci* = *Fibonacci*. The terms
    *Fibonacci number* and *Fibonacci sequence* were coined by French mathematician
    Edouard Lucas circa 1870.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，人们忘记了数学谜题天才斐波那契的名字和声誉，直到1836年，当书籍爱好者和臭名昭著的书籍盗窃犯古古列尔莫·利布里（Guglielmo Libri）将碎片拼凑在一起，并领悟到*Filius*
    + *Bonacci* = *Fibonacci*。术语*斐波那契数*和*斐波那契数列*是由法国数学家爱德华·卢卡斯（Edouard Lucas）于1870年左右创造的。
- en: Okay, back to work. To explain decimal numbers we use *exponential notation*.
    An exponential means that a number is multiplied by itself a specified number
    of times. For example, 5³ means that 5 is multiplied by itself 3 times, namely
    5×5×5, which is 125\. In the exponential expression B^E, which is read “B to the
    E power,” or simply “B to the E,” B is called the *base* and E is called the *exponent*.
    If N is any number, then N¹ is N itself. By convention N⁰ is 1 for any number
    N except 0\. The term 0⁰ has no defined value because different ways of evaluating
    0⁰ lead to different results.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，回到工作上。为了解释十进制数，我们使用*指数表示法*。指数意味着一个数字乘以自身指定的次数。例如，5³表示5乘以自身3次，即5×5×5，等于125。在指数表达式B^E中，读作“B的E次方”，或简称“B的E次方”，B称为*底数*，E称为*指数*。如果N是任何数字，则N¹是N本身。按照惯例，除了0之外的任何数字N⁰均为1。术语0⁰没有定义的值，因为对0⁰进行不同的计算会得到不同的结果。
- en: When we write a decimal, or base-10, number like 3456, it means 3×1000+4×100+5×10+6×1\.
    Using exponential notation this is the same as 3×10³+4×10²+5×10¹+6×10⁰. Starting
    from the right, the low-order digit, in this case 6, is multiplied by 1, the next
    digit, namely 5, is multiplied by 10, the next digit by 10², then 10³, and so
    forth. If there were 50 digits, the high-order digit, on the left, would be multiplied
    by 10^(49).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们写一个十进制或者十进制，即底数为10的数，比如3456时，它表示3×1000+4×100+5×10+6×1。使用指数表示法，这等同于3×10³+4×10²+5×10¹+6×10⁰。从右边开始，低位数字，即此处的6，乘以1，下一个数字，即5，乘以10，接下来的数字分别乘以10²，然后是10³，依此类推。如果有50位数，左边的高位数字将乘以10^(49)。
- en: It works the same way in other number bases. For example, the binary system
    uses base 2\. The binary number 11001 is evaluated as 1×2⁴+1×2³+0×2²+0×2¹+1×2⁰,
    or 16+8+0+0+1, which is 25\. A number base commonly used in computer work is *hexadecimal*,
    or base 16\. The digits used in base 16 are 0123456789ABCDEF, or 0123456789abcdef.
    I prefer to use the capital letters ABCDEF for this purpose, because it makes
    all of the hexadecimal digits the same height, which is easier to read. The hexadecimal
    number 9AB would be evaluated as 9×16²+10×16¹+11×16⁰, or 9×256+10×16+11, which
    is 2475 in decimal notation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他数制中也是一样的。例如，二进制系统使用基数2。二进制数11001被计算为1×2⁴+1×2³+0×2²+0×2¹+1×2⁰，即16+8+0+0+1，等于25。计算机工作中常用的一种数制是*十六进制*，或基数16。十六进制中使用的数字是0123456789ABCDEF，或0123456789abcdef。我更喜欢使用大写字母ABCDEF，因为这样所有的十六进制数字高度都一样，更容易阅读。十六进制数9AB被计算为9×16²+10×16¹+11×16⁰，即9×256+10×16+11，等于十进制表示的2475。
- en: 'One use of number bases in cryptography is to convert text into numbers. It
    is natural to associate the 26 letters of the alphabet with numbers in base 26
    like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数制在密码学中的一个用途是将文本转换为数字。将字母表的26个字母与26进制的数字自然地关联起来，如下所示：
- en: '![3-unnumb-5](../Images/3-unnumb-5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-5](../Images/3-unnumb-5.png)'
- en: The word WORK could be expressed as a number 22×26³+14×26²+17×26+10, or 396,588\.
    This value can be manipulated like any number, for example by addition, subtraction
    or multiplication.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 单词**WORK**可以表示为数字22×26³+14×26²+17×26+10，即396,588。这个值可以像任何数字一样进行操作，例如加法、减法或乘法。
- en: 'Large numbers can be expressed in exponential notation, also called *scientific*
    notation, like this: 1.23×10⁷. This is the product of 1.23 with 10⁷, which is
    10,000,000, so 1.23×10⁷ is 12,300,000\. This is the same as taking 1.23 and moving
    the decimal point 7 positions to the right.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大数可以用指数表示法，也称为*科学*表示法，例如：1.23×10⁷。这是1.23与10⁷的乘积，即10,000,000，所以1.23×10⁷是12,300,000。这与将1.23移动小数点7位的操作相同。
- en: 3.5 Prime numbers
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5 素数
- en: Numbers, specifically integers greater than 1, are classed as either *prime*
    numbers or *composite* numbers. If the number is the product of two smaller positive
    integers, then it is called composite; otherwise it is prime. The first few composite
    numbers are 4 = 2×2, 6 = 2×3, 8 = 2×4 and 9 = 3×3\. The first few prime numbers
    are 2, 3, 5, 7 and 11\. The number 1 is neither prime nor composite.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数字，特别是大于1的整数，被分类为*素数*或*合数*。如果一个数是两个较小的正整数的乘积，则称为合数；否则它是素数。最初的几个合数是4 = 2×2，6
    = 2×3，8 = 2×4和9 = 3×3。最初的几个素数是2、3、5、7和11。数1既不是素数也不是合数。
- en: An important property of prime numbers is that any number can be written as
    the product of prime numbers in only one way (aside from the order of the factors).
    For example, since 30 = 2×3×5, no prime other than 2, 3 or 5 can evenly divide
    30\. Here 2, 3 and 5 are called the *prime factors* of 30\. The set of prime factors
    of any integer is unique. Determining the prime factors of an integer is called
    *factoring* or *factorization*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 素数的一个重要性质是任何数都可以唯一地写成素数的乘积（除了因子的顺序）。例如，由于30 = 2×3×5，除了2、3或5之外的素数都不能整除30。这里的2、3和5被称为30的*素数因子*。任何整数的素数因子集合是唯一的。确定整数的素数因子称为*因数分解*或*因式分解*。
- en: If two integers A and B have no prime factors in common, then they are called
    *coprime* or *mutually prime*. For example, 20 and 27 are coprime. If N is an
    integer, then N and 1 are always coprime, while N and 0 are coprime only when
    N = 1\. N and N+1 are always coprime.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个整数A和B没有共同的素数因子，则它们被称为*互质*或*互素*。例如，20和27是互质的。如果N是一个整数，则N和1总是互质，而N和0只有当N =
    1时互质。N和N+1总是互质。
- en: Using positive integers, when any number A is divided by another number B, called
    the *divisor*, the result is a *quotient* and a *remainder*. Call the quotient
    Q and the remainder R. Then Q is defined as the largest integer such that QB does
    not exceed A. The remainder indicates how much is left over, that is, R = A-QB.
    Note that 0 ≤ R < N. For example, suppose A is 40 and B is 11\. The largest multiple
    of 11 that does not exceed 40 is 33, so the quotient is 3 since 3×11 = 33\. The
    remainder is 7 since 40-33 is 7.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正整数时，当任何数A被另一个称为*除数*的数B除时，结果是一个*商*和一个*余数*。称商为Q，余数为R。然后Q被定义为最大的整数，使得QB不超过A。余数指示剩余的量，即R
    = A-QB。注意0 ≤ R < N。例如，假设A是40，B是11。不超过40的11的最大倍数是33，因此商是3，因为3×11 = 33。余数是7，因为40-33
    = 7。
- en: 3.6 Modular arithmetic
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6 模算术
- en: The study of remainders is called *modular arithmetic*. Modular arithmetic was
    introduced by the mathematician Carl Friedrich Gauss of the University of Göttingen
    in 1801\. In modular arithmetic the quotient is ignored, the divisor is called
    the *modulus*, and the remainder is called the *residue*. In the preceding example,
    the modulus is 11 and the residue is 7\. If the modulus is N and two numbers X
    and Y have the same residue, we say that X and Y are *congruent modulo* *N*, or,
    equivalently, that X and Y are in the same *residue class* modulo N. This is written
    X≡Y (mod N). For example, 40≡7 (mod 11), so 40 and 7 are in the same residue class
    modulo 11\. X and Y will be congruent modulo N whenever X-Y is a multiple of N,
    or, equivalently, whenever X = Y+aN for some integer a.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 残余的研究被称为*模运算*。模运算由哥廷根大学的数学家卡尔·弗里德里希·高斯于1801年引入。在模运算中，商被忽略，除数称为*模数*，余数称为*剩余*。在前面的例子中，模数是11，剩余是7。如果模数是N，而两个数字X和Y有相同的剩余，我们说X和Y在模N下是*同余的*，或者等价地说，X和Y在模N下属于同一个*剩余类*。这表示为X≡Y
    (mod N)。例如，40≡7 (mod 11)，因此40和7在模11下属于同一个剩余类。只要X-Y是N的倍数，或者等价地，只要X = Y+aN对某个整数a成立，X和Y就在模N下是同余的。
- en: Residue classes follow the same rules of arithmetic as ordinary integers, such
    as
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余类遵循与普通整数相同的算术规则，例如
- en: '![3-unnumb-6](../Images/3-unnumb-6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![3-unnumb-6](../Images/3-unnumb-6.png)'
- en: We call -a the *additive inverse* of a. The notation a-b can be considered shorthand
    for a+(-b).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将-a称为*a的加法逆元*。记号a-b可以被看作a+(-b)的简写。
- en: 'The situation for the *multiplicative inverse* is more complex. The congruence
    ax≡b (mod N) has 3 cases to consider: (1) when a and N are coprime, (2) when a
    and N have a common factor d that does not divide b, and (3) when a, b and N are
    all divisible by the common factor d.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*乘法逆元*的情况更为复杂。同余方程ax≡b (mod N)有3种情况需要考虑：(1) 当a和N互质时，(2) 当a和N有一个不整除b的公因数d时，以及(3)
    当a、b和N都能被公因数d整除时。'
- en: Suppose that a and N are mutually prime. Then there is a unique residue a' that
    is the multiplicative inverse of a modulo N, so that aa'≡1 (mod N) and a'a≡1 (mod
    N). If a' exists, then the congruence ax≡b (mod N) can easily be solved as x≡a'b
    (mod N). In section 15.3.2 I present efficient ways of computing a' when N is
    large.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设a和N互素。那么存在唯一的剩余a'，它是模N的乘法逆元，使得aa'≡1 (mod N)且a'a≡1 (mod N)。如果a'存在，那么同余方程ax≡b
    (mod N)可以轻松求解为x≡a'b (mod N)。在第15.3.2节中，我介绍了当N很大时计算a'的高效方法。
- en: If a and N have a common factor d>1, then a has no multiplicative inverse modulo
    N. There can be no a' such that aa'≡1 (mod N). If b is not divisible by d, then
    ax≡b (mod N) has no solutions. For example, 4x≡5 (mod 12) has no solutions.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果a和N有一个大于1的公因数d，则a在模N下没有乘法逆元。就是说不存在一个a'使得aa'≡1 (mod N)。如果b不能被d整除，则同余方程ax≡b
    (mod N)没有解。例如，4x≡5 (mod 12)没有解。
- en: Suppose d is the greatest common divisor of a and N, denoted gcd(a,N). That
    is, d is the largest integer that evenly divides both a and N. If a, b and N are
    all divisible by d, then you can reduce the congruence by dividing a, b and N
    by d, namely (a/d)x≡(b/d) (mod N/d).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设d是a和N的最大公约数，记为gcd(a,N)。也就是说，d是能够同时整除a和N的最大整数。如果a、b和N都能被d整除，则可以通过将a、b和N除以d来简化同余方程，即(a/d)x≡(b/d)
    (mod N/d)。
- en: Let’s look at an example. Consider the congruence 8x≡4 (mod 12). Dividing through
    by 4 gives the reduced congruence 2x≡1 (mod 3). The solution to this congruence
    is x≡2 (mod 3), meaning that x can be any integer of the form 3n+2\. Going back
    to the original congruence, x is a residue modulo 12, so x must lie in the range
    0 to 11, inclusive. The numbers of the form 3n+2 that fall in this range are 2,
    5, 8 and 11\. This means x can have any of the values 2, 5, 8 or 11\. So the congruence
    8x≡4 (mod 12) has 4 solutions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。考虑同余方程8x≡4 (mod 12)。通过除以4得到简化的同余方程2x≡1 (mod 3)。这个同余方程的解为x≡2 (mod 3)，意味着x可以是任何形式为3n+2的整数。回到原始同余方程，x是模12的一个剩余，因此x必须在0到11的范围内。落在此范围内的形式为3n+2的数字是2、5、8和11。这意味着x可以有值2、5、8或11。因此，同余方程8x≡4
    (mod 12)有4个解。
- en: Later in this book, **mod** is used as an arithmetic operator. The expression
    x mod y, where x is an integer and y is a positive integer, means the remainder
    when x is divided by y. Thus 27 mod 3 is 0, 27 mod 4 is 3, and 27 mod 5 is 2.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后文中，**mod**被用作算术运算符。表达式x mod y，其中x是整数，y是正整数，表示x除以y的余数。因此27 mod 3是0，27 mod
    4是3，27 mod 5是2。
