- en: 8 Jefferson Wheel Cypher
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8 杰斐逊轮式密码
- en: This chapter covers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括
- en: Thomas Jefferson’s wheel cypher
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托马斯·杰斐逊的轮式密码
- en: Solving a wheel cypher using a known word
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已知单词解密轮式密码
- en: Solving a wheel cypher when no words are known
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不知道任何单词时解密轮式密码
- en: Thomas Jefferson invented the *Jefferson Wheel Cypher* sometime between 1790
    and 1793, while he was serving as secretary of state to George Washington. The
    device consists of an iron rod or spindle 1/8 to 1/4 inch in diameter and 6 to
    8 inches long with 36 wooden disks about 2 inches in diameter and 1/6 inch thick.
    Each disk has a hole drilled through its center the same size as the rod so that
    all of the disks can be placed snugly onto the rod, forming a wooden cylinder.
    The flat faces of the disks touch one another, with the outside rounded edges
    visible. One end of the rod has a head, like a nail head. The other end has screw
    threads so that a nut can be screwed onto the rod, holding the disks firmly in
    place.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 托马斯·杰斐逊（Thomas Jefferson）在 1790 年至 1793 年间发明了*杰斐逊轮式密码*，当时他担任乔治·华盛顿（George Washington）的国务卿。该装置由直径为
    1/8 至 1/4 英寸，长为 6 到 8 英寸的铁棒或纺锤和直径约为 2 英寸，厚约为 1/6 英寸的 36 个木制圆盘组成。每个圆盘在中心都有一个与棒相同大小的孔，以便所有圆盘都可以紧密地放在棒上，形成一个木制圆筒。圆盘的平面面对着彼此，外圆的圆边可见。棒的一端有一个类似钉头的头部。另一端有螺纹，以便螺母可以拧紧到棒上，将圆盘牢固地固定在位。
- en: The disks are numbered from 1 to 36 on their flat sides. The round outer edge
    is divided into 26 equal sections. The 26 letters of the alphabet are written
    or incised into these 26 sections in some scrambled order, which is different
    for each disk. The order of the disks on the spindle is the key for the cipher,
    which is nowadays called a *multiplex cipher*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 圆盘的平面侧编号为 1 到 36。外圆边被分为 26 个相等的部分。字母表的 26 个字母以某种混乱的顺序写入或刻在这些 26 个部分中的每一个中，每个圆盘的顺序都不同。棒上圆盘的顺序是密码的关键，这种密码现在被称为*复用密码*。
- en: Here is a reproduction of a 26-disk Jefferson Cypher Wheel displayed at the
    National Cryptologic Museum in Fort Meade, Maryland. (Photo courtesy of Daderot
    under the Creative Commons CC0 1.0 license.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是位于马里兰州福特米德（Fort Meade）的国家密码博物馆（National Cryptologic Museum）展示的一台 26 片杰斐逊密码轮的复制品。（照片由
    Daderot 拍摄，根据知识共享 CC0 1.0 许可证发布。）
- en: '![8-unnumb-1](../Images/8-unnumb-1.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![8-unnumb-1](../Images/8-unnumb-1.png)'
- en: A message is enciphered with this device by first placing the disks on the spindle
    in the order specified by the key. The nut is screwed on loosely so that the individual
    disks can be turned. The first letter of the message is found on the first disk,
    and the second disk is turned so that the second letter of the message is next
    to the first letter. Then the third disk is turned so the third letter of the
    message is next to the second letter, and so forth until the first 36 letters
    of the message are lined up in an even row. The nut is then tightened to keep
    them in place.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该装置对消息进行加密的方法是首先按照密钥指定的顺序将圆盘放在轴上。螺母松开，以便可以转动各个圆盘。消息的第一个字母在第一个圆盘上找到，然后转动第二个圆盘，使消息的第二个字母紧挨着第一个字母。然后转动第三个圆盘，使消息的第三个字母紧挨着第二个字母，依此类推，直到消息的前
    36 个字母排成一行。然后拧紧螺母以固定它们的位置。
- en: Turning the cylinder, there are 25 other rows of letters, all of which are meaningless
    jumbles. Sandra may choose any one of these as the ciphertext. Riva repeats this
    process, setting up the ciphertext on one row of the cylinder. It will be obvious
    which of the 25 other rows is the intended message.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 转动圆筒，还有其他 25 行字母，所有这些都是无意义的混乱。桑德拉可以选择其中任意一行作为密文。里瓦重复这个过程，在圆筒的一行上设置密文。很明显，其他
    25 行中哪一行是预期的信息。
- en: Jefferson apparently never put this cipher into use. The concept lay dormant
    until it was reinvented by Étienne Bazeries in the early 1890s. It was adopted
    by the French in 1901\. Bazeries’s version had two improvements. It had a stand
    or cradle so the device could be placed on a desk for two-handed operation, and
    it had a guide that helped the user line up the letters evenly and select the
    row for reading out the ciphertext. A version of this cipher using 25 aluminum
    disks was invented by Col. Parker Hitt in 1914 and adopted by the US Army in 1922
    as the M-94, and by the US Navy in 1926 as the CSP-488\. Hitt’s version was only
    4.25” long, small enough to fit in a pocket, and had notches and prongs on the
    flat faces of the disks that kept them from slipping after they had been aligned.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 杰斐逊显然从未将这种密码投入使用。这个概念一直搁置，直到19世纪90年代初由Étienne Bazeries重新发明。它于1901年被法国采用。Bazeries的版本有两个改进。它有一个支架，这样设备可以放在桌子上进行双手操作，并且有一个导轨，帮助用户将字母对齐并选择用于读出密文的行。1914年，上校帕克·希特发明了一种使用25个铝盘的密码版本，并于1922年被美国陆军采用为M-94，于1926年被美国海军采用为CSP-488。希特的版本只有4.25英寸长，足够小，可以放在口袋里，盘片的平面面上有凹槽和齿，使得它们在对齐后不会滑动。
- en: Here is a photo of a CSP-488 from the National Cryptologic Museum.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是国家密码博物馆展示的一张CSP-488的照片。
- en: '![8-unnumb-2](../Images/8-unnumb-2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![8-unnumb-2](../Images/8-unnumb-2.png)'
- en: A flat version of the cipher was invented by Hitt in 1916 and adopted by the
    Army in 1935 as the M-138\. This version was a flat aluminum board with 25 channels
    that held paper strips that could slide back and forth to simulate the turning
    of the disks. Each strip had two copies of the scrambled alphabet. This device
    was more secure since the paper strips could easily be replaced, and even hand-written
    in the field if necessary. This was soon replaced by the M138A, or CSP-845 in
    the Navy, which had slots for 30 paper strips. 100 strips were supplied with the
    device, designated by 2-digit numbers, so any message used 30 out of 100 possible
    strips. This allows for 100!/70! = 7.79×10^(57) possible keys.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 1916年，Hitt发明了密码的平面版本，并于1935年被军方采用，称为M-138。这个版本是一个带有25个通道的平面铝板，上面放置着可以前后滑动的纸条，以模拟盘片的旋转。每个纸条上都有两份乱序的字母表。这个设备更加安全，因为纸条可以很容易地更换，甚至在必要时可以在野外手写。这很快被M138A或海军的CSP-845所取代，后者有30个纸条槽。设备附带100条纸条，用2位数字编号，因此任何消息使用了100条中的30条。这样可以产生100!/70!=7.79×10^(57)种可能的密钥。
- en: The M-138A had a hinge in the center so that it could be folded for easier carrying.
    Each half had a separate guide that was used for aligning the strips and reading
    out 15 letters of the cipher. These improvements considerably strengthened the
    cipher.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: M-138A中间有一个铰链，可以折叠以便携带。每半部分都有一个独立的导轨，用于对齐纸条并读出密码的15个字母。这些改进显著增强了密码的安全性。
- en: These strip ciphers were dropped by the Army around 1942 or 1943, but they remained
    in use by the Navy as a standby in case a loss of electrical power makes it impossible
    to use any of their electronic or electromechanical cipher devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 军方在1942年或1943年左右放弃了这种带纸条的密码，但海军仍将其作为备用，以防止电力故障使得无法使用任何电子或电机式密码设备。
- en: It is not feasible to solve a multiplex cipher if Emily does not have a copy
    of the device and does not know the alphabets. If Emily possesses the device,
    the cipher is relatively easy to solve if she knows some probable words. When
    Emily possesses a copy of the device and knows some probable words, the Jefferson
    Cypher Wheel is rated Four to Five. When no probable words are known, the rating
    is Six to Seven. The more ciphertext Emily has, the lower the rating. Conversely,
    if the device has lots of extra disks, the rating goes up. For example, if the
    device holds 30 disks that the user selects from a supply of 100 disks, the rating
    can go to Eight. For very short messages, less than two times the number of disks,
    solution may be impossible unless Emily intercepts multiple messages using the
    same key. This may happen if the sender changes the order of the disks only once
    per day.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Emily没有设备的副本并且不知道字母表，解密多路复用密码是不可行的。如果Emily拥有设备，如果她知道一些可能的单词，解密就相对容易。当Emily拥有设备的副本并且知道一些可能的单词时，杰斐逊密码轮的评级为四到五。如果没有已知的可能单词，评级为六到七。Emily拥有的密文越多，评级越低。相反，如果设备有很多额外的盘片，评级就会提高。例如，如果设备有30个盘片，用户可以从100个盘片中选择，评级可以达到八。对于非常短的消息，少于两倍盘片数量，除非Emily拦截使用相同密钥的多个消息，否则解密可能是不可能的。如果发件人每天只更改盘片的顺序一次，这种情况可能会发生。
- en: 8.1 Known-word solution
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.1 已知单词解答
- en: 'You can solve a message enciphered with the Jefferson Cypher Wheel when you
    have enough text, and you know at least part of the message. Often, just a single
    known word is sufficient. Suppose you know that Sandra is using the M-94 device,
    which has 25 disks, and you have intercepted a message:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有足够的文本，并且知道至少部分消息时，可以解密使用杰斐逊密码轮加密的消息。通常，只要知道一个单词就足够了。假设你知道 Sandra 正在使用 M-94
    设备，它有 25 个盘片，并且你拦截到了一条消息：
- en: '![8-unnumb-3](../Images/8-unnumb-3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![8-unnumb-3](../Images/8-unnumb-3.png)'
- en: Suppose you also know the plaintext message begins URGENT. This has been transformed
    into the ciphertext **CLPOXF**. Since URGENT is on one row and **CLPOXF** is on
    another row, the distance between corresponding pairs of letters must be the same.
    Let’s call the row with URGENT row 1, and suppose the row with **CLPOXF** is row
    8\. The first letter of the plaintext, U, and the first letter of the ciphertext,
    C, are taken from row 1 and row 8 of the first disk. So, on the first disk the
    distance from U to C must be 7\. On the second disk the distance from R to L must
    be 7\. On the third disk the distance from G to P must be 7, as well as E to O,
    N to X and T to F.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你还知道明文消息以 URGENT 开始。这已经被转换成了密文 **CLPOXF**。由于 URGENT 在一行上，而 **CLPOXF** 在另一行上，因此相应字母对之间的距离必须相同。让我们将带有
    URGENT 的行称为第 1 行，假设带有 **CLPOXF** 的行是第 8 行。明文的第一个字母 U 和密文的第一个字母 C 分别来自第一个盘片的第 1
    行和第 8 行。因此，在第一个盘片上，从 U 到 C 的距离必须为 7\. 在第二个盘片上，从 R 到 L 的距离必须为 7\. 在第三个盘片上，从 G 到
    P 的距离必须为 7，E 到 O 也是，N 到 X 也是，T 到 F 也是。
- en: The easiest way to search is to try each possible distance from 1 through 25
    in turn. Start with distance 1\. Find all of the disks where the distance from
    U to C is 1\. In other words, where the next letter after U is C. If there are
    no such disks, then you know the distance is not 1\. Then find all of the disks
    where the distance from R to L is 1\. Again, if there are none the distance cannot
    be 1.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索的最简单方法是依次尝试从 1 到 25 的每个可能的距离。从距离为 1 开始。找出所有距离 U 到 C 的距离为 1 的盘片。换句话说，U 的下一个字母是
    C 的盘片。如果没有这样的盘片，那么你知道距离不是 1\. 然后找出所有距离 R 到 L 的距离为 1 的盘片。同样，如果没有，那么距离也不能是 1。
- en: Let’s suppose that you have found 12 sets of disks where the letter pairs are
    all at a distance of 1\. You now need to test these 12 sets to see if any of them
    are correct. Let the first set of disks be, say, 18-4-21-9-13-11\. Start testing
    with the second block of the ciphertext, letters 26 through 50\. This block starts
    **ESIWVI**. Set disk 18 to letter **E**, disk 4 to letter **S**, disk 21 to letter
    **I**, and so on. Now look at the other 25 rows. If they are all gibberish, like
    **HNSAEI** or **TFPGUW**, then you know 18-4-21-9-13-11 is not the correct sequence
    of disks. On the other hand, if you see some plausible text like NCONDI, which
    could be part of the word UNCONDITIONAL, then 18-4-21-9-13-11 might be the correct
    sequence of disks. Test again using the third block of the ciphertext starting
    with **GAFOEM**. If the third and fourth blocks all lead to reasonable text segments,
    then 18-4-21-9-13-11 is probably correct ... but keep searching because you might
    find better disk sequences.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经找到了 12 组盘片，其中字母对的距离都是 1\. 现在你需要测试这 12 组盘片，看看它们中是否有任何一组是正确的。假设第一组盘片是 18-4-21-9-13-11\.
    从密文的第二块开始测试，字母从 26 到 50\. 这个块以 **ESIWVI** 开头。将盘片 18 设置为字母 **E**，盘片 4 设置为字母 **S**，盘片
    21 设置为字母 **I**，依此类推。现在看其他 25 行。如果它们都是无意义的，比如 **HNSAEI** 或 **TFPGUW**，那么你就知道 18-4-21-9-13-11
    不是正确的盘片顺序。另一方面，如果你看到一些像 NCONDI 这样的合理文本，它可能是 UNCONDITIONAL 的一部分，那么 18-4-21-9-13-11
    可能是正确的盘片顺序。再次测试，使用以 **GAFOEM** 开头的密文的第三块。如果第三和第四块都导致合理的文本片段，那么 18-4-21-9-13-11
    可能是正确的...但继续搜索，因为你可能会找到更好的盘片顺序。
- en: If you don’t see any likely snippets of text, then try the other 11 disk sequences.
    If none of these work, try distance 2, then distance 3, ... through distance 25\.
    There will probably be a few hundred combinations of disk order and distance to
    test. This is tedious, but still feasible by hand. If nothing works, go back and
    look for disk sequences where 2 out of the 3 tests gave plausible text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到任何可能的文本片段，那么尝试其他 11 组盘片顺序。如果这些都不起作用，尝试距离为 2、距离为 3，... 直到距离为 25\. 可能会有几百种盘片顺序和距离的组合需要测试。这很乏味，但手工仍然可行。如果没有任何组合有效，请返回查找其中
    2 个测试给出合理文本的盘片顺序。
- en: Once you have settled on the most probable sequence for the first 6 disks, and
    the corresponding distances, then you try to extend this to the 7th disk. For
    each choice of disk you already know the distance from the plaintext to the ciphertext,
    so the extension process goes fairly quickly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定了前6个盘的最有可能的序列以及相应的距离，然后尝试将其扩展到第7个盘。对于每个已知的盘的选择，你已经知道了从明文到密文的距离，因此扩展过程会相当快速。
- en: '*8.2 Ciphertext-only solution'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*8.2 仅密文解决方案'
- en: It is also possible to solve multiplex ciphers when there are no known words.
    This is called a ciphertext-only solution. I was the first person to find such
    a solution (“Computer Methods for Decrypting Multiplex Ciphers.” *Cryptologia*
    2 (Apr. 1978), pp. 152-160). In the original 1978 paper I used bigram frequencies
    and worked up to trigrams. Computers today are much faster, and have much more
    storage, so we can skip the bigram step. The method assumes that you have a table
    giving the probabilities for each possible trigram in English. You can compile
    such a table yourself, or just download a trigram table from the internet. Here
    is the gist of the method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有已知单词时，也可以解密多重密码。这被称为仅密文解决方案。我是第一个找到这种解决方案的人（“解密多重密码的计算机方法。” *Cryptologia*
    2 (1978年4月), pp. 152-160）。在原始的1978年论文中，我使用了二元频率，并逐步发展到三元组。如今的计算机速度更快，存储更多，所以我们可以跳过二元组步骤。该方法假设你有一张表，列出了英语中每个可能三元组的概率。你可以自己编制这样一张表，或者只需从互联网上下载一个三元组表。以下是该方法的要点。
- en: Let us assume as before that Emily is using the M-94 device with 25 cipher alphabets,
    and that we have intercepted a message of at least 3 blocks, or 75 letters. All
    that we know about the message is that it is in English. For example, suppose
    we have intercepted
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设与之前一样，艾米莉正在使用具有25个密码字母表的M-94设备，并且我们拦截了至少3个区块或75个字母的消息。我们知道关于消息的一切就是它是用英语写的。例如，假设我们拦截到了
- en: '![8-unnumb-4](../Images/8-unnumb-4.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![8-unnumb-4](../Images/8-unnumb-4.png)'
- en: Start by trying all possible choices for the first 3 disks. There are 25×24×23
    = 13,800 such choices. For each choice, set the disks to the first 3 letters in
    each block of the ciphertext, namely **CLP**, **ESI** and **GAF**. For each of
    these trigrams, look at the other 25 rows. These rows contain the possible plaintext
    trigrams corresponding to the ciphertext trigrams. Since there are 25 choices
    for each of the 3 rows, the total number of possibilities is 13800×25³ = 215,625,000\.
    This can be easily handled by a desktop computer, or even a notebook computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先尝试前3个盘的所有可能选择。有25×24×23 = 13,800种这样的选择。对于每个选择，将盘设置为密文每个区块的前3个字母，即**CLP**，**ESI**和**GAF**。对于这些三字母组中的每一个，查看其他25行。这些行包含与密文三字母组对应的可能的明文三字母组。由于每个3行有25种选择，所以总的可能性数为13800×25³
    = 215,625,000。这可以很容易地通过台式电脑或甚至笔记本电脑处理。
- en: For each combination of 3 disks and 3 rows, the probability of that combination
    is the product of the probabilities for the 3 plaintext trigrams. Equivalently,
    the logarithm of the probability is the sum of the logarithms of the 3 trigram
    probabilities. The idea is to keep only the most likely combinations and discard
    the rest. For example, you could keep only the top 1%, or you could keep a fixed
    number of good combinations, perhaps the 1,000,000 best. Let’s assume that you
    chose to keep the top 2,000,000.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个3个盘和3行的组合，该组合的概率是3个明文三字母组的概率的乘积。等价地，概率的对数是3个三字母组概率的对数之和。这个想法是只保留最有可能的组合并丢弃其余的。例如，你可以只保留前1%，或者你可以保留一定数量的好组合，也许是最好的1,000,000个。假设你选择保留前2,000,000个。
- en: One way to do that is to generate all 215,625,000 combinations, then sort them
    on the probability, and throw out the bottom 99%. That would take a lot of storage.
    There are better ways to do this. Start by allocating a table that is 10% to 25%
    bigger than the number of combinations you want, let’s say 2,500,000 combinations.
    Begin generating the combinations and putting them in the table. When the table
    gets full it needs to be trimmed by about 20%.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是生成所有215,625,000个组合，然后按概率对它们进行排序，并且去掉最低的99%。这需要大量的存储空间。有更好的方法来做这件事。首先分配一个比你想要的组合数大10%到25%的表，比如说2,500,000个组合。开始生成这些组合并将它们放入表中。当表满了之后，需要将其减少大约20%。
- en: That could be done by sorting the table and deleting the bottom 20%. That is,
    you sort by descending probability and then just set the number of table entries
    to 2,000,000\. Sorting 2,500,000 items is a lot faster than sorting 215,625,000
    items, but there are far faster ways. Select 10 items from the table at random.
    (If you don’t know how to choose randomly, then choose the items 1/11, 2/11, ...
    , 10/11 of the way through.) Sort these 10 items from least-probable to most-probable.
    Call these sorted items a,b,c,d,e,f,g,h,i,j. Let P be the probability of item
    b. Delete every item in the table whose probability is less than P.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对表格进行排序并删除底部 20%，可以实现这一点。也就是说，你按照概率降序排序，然后将表格条目数量设置为 2,000,000。对 2,500,000
    个项目进行排序比对 215,625,000 个项目进行排序要快得多，但有更快的方法。从表格中随机选择 10 个项目。（如果你不知道如何随机选择，那么选择距离表格
    1/11、2/11、...、10/11 处的项目。）将这 10 个项目按照从最不可能到最可能的顺序排序。将这些排序好的项目命名为 a、b、c、d、e、f、g、h、i、j。设
    P 为项目 b 的概率。删除表格中概率小于 P 的每个项目。
- en: Continue generating combinations, but do not add any item to the table whose
    probability is P or less. Each time the table fills up, repeat the process of
    sampling, sorting the samples, and resetting the cutoff probability P.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 继续生成组合，但不要向表中添加任何概率小于或等于 P 的项目。每当表填满时，重复抽样、对样本进行排序并重新设置截止概率 P 的过程。
- en: At the end of all this, you will have about 2,000,000 combinations of 3 disks
    and 3 rows. The next step is to extend this to 4 disks. Try all 22 possible choices
    for the 4th disk. This will give you about 44,000,000 combinations. Now look at
    the trigrams formed by disks 2, 3 and 4\. For each combination multiply the probability
    for the trigram on disks 1,2,3 by the probability of the trigram on disks 2,3,4
    to get an approximate probability for the tetragram on all 4 disks. Multiply the
    probabilities for the plaintext tetragrams corresponding to the 3 ciphertext tetragrams
    **CLPO**, **ESIW** and **GAFO**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些步骤结束后，你将获得约 2,000,000 种由 3 个磁盘和 3 行组成的组合。下一步是将此扩展到 4 个磁盘。尝试所有 22 种可能的选择来选择第
    4 个磁盘。这将给你约 44,000,000 个组合。现在查看由磁盘 2、3 和 4 形成的三元组。对于每种组合，将磁盘 1、2、3 上的三元组的概率乘以磁盘
    2、3、4 上的三元组的概率，以获得所有 4 个磁盘上的四元组的近似概率。将对应于 3 个密文三元组**CLPO**、**ESIW**和**GAFO**的明文四元组的概率相乘。
- en: This will give you probabilities for the 44,000,000 combinations of 4 disks
    and 3 rows. Again, you can keep the best 1% to give you 440,000 sets of tetragrams.
    Use the same method as you used for the trigrams.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供 4 个磁盘和 3 行的 44,000,000 种组合的概率。同样，你可以保留最佳的 1% 来给你 440,000 组四元组。使用与三元组相同的方法。
- en: Continue this way to get the pentagrams, hexagrams, heptagrams, and so forth.
    Each time you add a disk you can keep fewer combinations than the time before.
    When you get down below 100, you can just pick out the correct combination by
    sight and complete the solution by hand.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以此方式继续获取五元组、六元组、七元组等。每次添加一个磁盘时，你可以保留的组合比上一次少。当你的组合数量少于 100 时，你可以通过眼睛直接选择出正确的组合，并手动完成解决方案。
- en: 'One problem that may cause this procedure to fail is this: even in normal text,
    a trigram may appear that has a probability of 0 in your trigram table. If Emily
    is using nulls, this may occur fairly often. This could cause the legitimate plaintext
    to get rejected.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可能导致此过程失败的一个问题是：即使在普通文本中，也可能出现在你的三元组表中概率为 0 的三元组。如果 Emily 使用了空值，这种情况可能经常发生。这可能导致合法明文被拒绝。
- en: One solution is to jigger the trigram probabilities so that a 0 probability
    never occurs. Let’s write P(x) for the probability of a string x. If the probability
    of a trigram, say XYZ, is zero you can use the greater of P(X)P(YZ) and P(XY)P(Z).
    I suggest dividing this by 3, say, because XYZ never occurred in your trigram
    count. If the probability of XYZ is still 0, then use the individual letters.
    For example, set P(XYZ) to P(X)P(Y)P(Z)/10.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解决方案是调整三元组概率，使得 0 概率永远不会出现。让 P(x) 表示字符串 x 的概率。如果一个三元组，比如 XYZ，的概率为零，你可以使用 P(X)P(YZ)
    和 P(XY)P(Z) 中较大的那个。我建议将这个值除以 3，比如说，因为 XYZ 从未在你的三元组计数中出现过。如果 XYZ 的概率仍然为 0，则使用各个字母。例如，将
    P(XYZ) 设置为 P(X)P(Y)P(Z)/10。
- en: A different solution is not to multiply the probabilities, but to use some other
    function to combine them. For example, you could add the sum of the squares of
    the probabilities. This will strongly reward common trigrams, while largely ignoring
    rare trigrams.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决方案是不要将概率相乘，而是使用其他函数将它们组合起来。例如，你可以将概率的平方和相加。这将强烈奖励常见的三元组，而大部分忽略罕见的三元组。
- en: If all of this fails, then simply try the procedure again from a different starting
    point in the ciphertext. For example, start at the fifth disk.******
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些方法都失败了，那么就从密文中的另一个起始点再次尝试该过程。例如，从第五个磁盘开始。
